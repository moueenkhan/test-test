/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for TotalCashDetails type.
 */
public class TotalCashDetails {
    private Double totalCash;
    private Double bankInHand;
    private Double cashEquivalents;

    /**
     * Default constructor.
     */
    public TotalCashDetails() {
    }

    /**
     * Initialization constructor.
     * @param  totalCash  Double value for totalCash.
     * @param  bankInHand  Double value for bankInHand.
     * @param  cashEquivalents  Double value for cashEquivalents.
     */
    public TotalCashDetails(
            Double totalCash,
            Double bankInHand,
            Double cashEquivalents) {
        this.totalCash = totalCash;
        this.bankInHand = bankInHand;
        this.cashEquivalents = cashEquivalents;
    }

    /**
     * Getter for TotalCash.
     * Value for Balance Sheet - Total Cash for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TotalCash")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalCash() {
        return totalCash;
    }

    /**
     * Setter for TotalCash.
     * Value for Balance Sheet - Total Cash for these accounts
     * @param totalCash Value for Double
     */
    @JsonSetter("TotalCash")
    public void setTotalCash(Double totalCash) {
        this.totalCash = totalCash;
    }

    /**
     * Getter for BankInHand.
     * Value for Balance Sheet - Total Cash - Bank in Hand for these accounts
     * @return Returns the Double
     */
    @JsonGetter("BankInHand")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getBankInHand() {
        return bankInHand;
    }

    /**
     * Setter for BankInHand.
     * Value for Balance Sheet - Total Cash - Bank in Hand for these accounts
     * @param bankInHand Value for Double
     */
    @JsonSetter("BankInHand")
    public void setBankInHand(Double bankInHand) {
        this.bankInHand = bankInHand;
    }

    /**
     * Getter for CashEquivalents.
     * Value for Balance Sheet - Total Cash - Cash Equivalents for these accounts
     * @return Returns the Double
     */
    @JsonGetter("CashEquivalents")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCashEquivalents() {
        return cashEquivalents;
    }

    /**
     * Setter for CashEquivalents.
     * Value for Balance Sheet - Total Cash - Cash Equivalents for these accounts
     * @param cashEquivalents Value for Double
     */
    @JsonSetter("CashEquivalents")
    public void setCashEquivalents(Double cashEquivalents) {
        this.cashEquivalents = cashEquivalents;
    }

    /**
     * Converts this TotalCashDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TotalCashDetails [" + "totalCash=" + totalCash + ", bankInHand=" + bankInHand
                + ", cashEquivalents=" + cashEquivalents + "]";
    }

    /**
     * Builds a new {@link TotalCashDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TotalCashDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .totalCash(getTotalCash())
                .bankInHand(getBankInHand())
                .cashEquivalents(getCashEquivalents());
        return builder;
    }

    /**
     * Class to build instances of {@link TotalCashDetails}.
     */
    public static class Builder {
        private Double totalCash;
        private Double bankInHand;
        private Double cashEquivalents;



        /**
         * Setter for totalCash.
         * @param  totalCash  Double value for totalCash.
         * @return Builder
         */
        public Builder totalCash(Double totalCash) {
            this.totalCash = totalCash;
            return this;
        }

        /**
         * Setter for bankInHand.
         * @param  bankInHand  Double value for bankInHand.
         * @return Builder
         */
        public Builder bankInHand(Double bankInHand) {
            this.bankInHand = bankInHand;
            return this;
        }

        /**
         * Setter for cashEquivalents.
         * @param  cashEquivalents  Double value for cashEquivalents.
         * @return Builder
         */
        public Builder cashEquivalents(Double cashEquivalents) {
            this.cashEquivalents = cashEquivalents;
            return this;
        }

        /**
         * Builds a new {@link TotalCashDetails} object using the set fields.
         * @return {@link TotalCashDetails}
         */
        public TotalCashDetails build() {
            return new TotalCashDetails(totalCash, bankInHand, cashEquivalents);
        }
    }
}
