/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for CurrentDirectors type.
 */
public class CurrentDirectors {
    private String foreignAddressFlag;
    private String directorCompanyFlag;
    private String directorNumber;
    private String appointmentDate;
    private String appointmentIndicator;
    private Integer directorshipLength;
    private String latestReturns;
    private String nOCRef;
    private Integer numberConvictions;
    private List<ConvictionDetails> convictionDetails;
    private DirectorDetails directorDetails;

    /**
     * Default constructor.
     */
    public CurrentDirectors() {
    }

    /**
     * Initialization constructor.
     * @param  foreignAddressFlag  String value for foreignAddressFlag.
     * @param  directorCompanyFlag  String value for directorCompanyFlag.
     * @param  directorNumber  String value for directorNumber.
     * @param  appointmentDate  String value for appointmentDate.
     * @param  appointmentIndicator  String value for appointmentIndicator.
     * @param  directorshipLength  Integer value for directorshipLength.
     * @param  latestReturns  String value for latestReturns.
     * @param  nOCRef  String value for nOCRef.
     * @param  numberConvictions  Integer value for numberConvictions.
     * @param  convictionDetails  List of ConvictionDetails value for convictionDetails.
     * @param  directorDetails  DirectorDetails value for directorDetails.
     */
    public CurrentDirectors(
            String foreignAddressFlag,
            String directorCompanyFlag,
            String directorNumber,
            String appointmentDate,
            String appointmentIndicator,
            Integer directorshipLength,
            String latestReturns,
            String nOCRef,
            Integer numberConvictions,
            List<ConvictionDetails> convictionDetails,
            DirectorDetails directorDetails) {
        this.foreignAddressFlag = foreignAddressFlag;
        this.directorCompanyFlag = directorCompanyFlag;
        this.directorNumber = directorNumber;
        this.appointmentDate = appointmentDate;
        this.appointmentIndicator = appointmentIndicator;
        this.directorshipLength = directorshipLength;
        this.latestReturns = latestReturns;
        this.nOCRef = nOCRef;
        this.numberConvictions = numberConvictions;
        this.convictionDetails = convictionDetails;
        this.directorDetails = directorDetails;
    }

    /**
     * Getter for ForeignAddressFlag.
     * Current Director address location indicator - Y = Foreign; N = Not foreign; M = Unknown
     * @return Returns the String
     */
    @JsonGetter("ForeignAddressFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getForeignAddressFlag() {
        return foreignAddressFlag;
    }

    /**
     * Setter for ForeignAddressFlag.
     * Current Director address location indicator - Y = Foreign; N = Not foreign; M = Unknown
     * @param foreignAddressFlag Value for String
     */
    @JsonSetter("ForeignAddressFlag")
    public void setForeignAddressFlag(String foreignAddressFlag) {
        this.foreignAddressFlag = foreignAddressFlag;
    }

    /**
     * Getter for DirectorCompanyFlag.
     * Current Director company indicator - Y = Director is a company; N = Director is not a company
     * @return Returns the String
     */
    @JsonGetter("DirectorCompanyFlag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDirectorCompanyFlag() {
        return directorCompanyFlag;
    }

    /**
     * Setter for DirectorCompanyFlag.
     * Current Director company indicator - Y = Director is a company; N = Director is not a company
     * @param directorCompanyFlag Value for String
     */
    @JsonSetter("DirectorCompanyFlag")
    public void setDirectorCompanyFlag(String directorCompanyFlag) {
        this.directorCompanyFlag = directorCompanyFlag;
    }

    /**
     * Getter for DirectorNumber.
     * Experian Director reference number
     * @return Returns the String
     */
    @JsonGetter("DirectorNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDirectorNumber() {
        return directorNumber;
    }

    /**
     * Setter for DirectorNumber.
     * Experian Director reference number
     * @param directorNumber Value for String
     */
    @JsonSetter("DirectorNumber")
    public void setDirectorNumber(String directorNumber) {
        this.directorNumber = directorNumber;
    }

    /**
     * Getter for AppointmentDate.
     * Director appointment date (yyyy-mm-dd)
     * @return Returns the String
     */
    @JsonGetter("AppointmentDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAppointmentDate() {
        return appointmentDate;
    }

    /**
     * Setter for AppointmentDate.
     * Director appointment date (yyyy-mm-dd)
     * @param appointmentDate Value for String
     */
    @JsonSetter("AppointmentDate")
    public void setAppointmentDate(String appointmentDate) {
        this.appointmentDate = appointmentDate;
    }

    /**
     * Getter for AppointmentIndicator.
     * The date of Current Director's appointment qualifier - P=prior to Appointment The date;
     * E=exact date
     * @return Returns the String
     */
    @JsonGetter("AppointmentIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAppointmentIndicator() {
        return appointmentIndicator;
    }

    /**
     * Setter for AppointmentIndicator.
     * The date of Current Director's appointment qualifier - P=prior to Appointment The date;
     * E=exact date
     * @param appointmentIndicator Value for String
     */
    @JsonSetter("AppointmentIndicator")
    public void setAppointmentIndicator(String appointmentIndicator) {
        this.appointmentIndicator = appointmentIndicator;
    }

    /**
     * Getter for DirectorshipLength.
     * Length of Current Directorship in months
     * @return Returns the Integer
     */
    @JsonGetter("DirectorshipLength")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDirectorshipLength() {
        return directorshipLength;
    }

    /**
     * Setter for DirectorshipLength.
     * Length of Current Directorship in months
     * @param directorshipLength Value for Integer
     */
    @JsonSetter("DirectorshipLength")
    public void setDirectorshipLength(Integer directorshipLength) {
        this.directorshipLength = directorshipLength;
    }

    /**
     * Getter for LatestReturns.
     * Date of last returns (yyyy-mm-dd)
     * @return Returns the String
     */
    @JsonGetter("LatestReturns")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLatestReturns() {
        return latestReturns;
    }

    /**
     * Setter for LatestReturns.
     * Date of last returns (yyyy-mm-dd)
     * @param latestReturns Value for String
     */
    @JsonSetter("LatestReturns")
    public void setLatestReturns(String latestReturns) {
        this.latestReturns = latestReturns;
    }

    /**
     * Getter for NOCRef.
     * Notice of Correction reference
     * @return Returns the String
     */
    @JsonGetter("NOCRef")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNOCRef() {
        return nOCRef;
    }

    /**
     * Setter for NOCRef.
     * Notice of Correction reference
     * @param nOCRef Value for String
     */
    @JsonSetter("NOCRef")
    public void setNOCRef(String nOCRef) {
        this.nOCRef = nOCRef;
    }

    /**
     * Getter for NumberConvictions.
     * Number of convictions against the Current Director
     * @return Returns the Integer
     */
    @JsonGetter("NumberConvictions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNumberConvictions() {
        return numberConvictions;
    }

    /**
     * Setter for NumberConvictions.
     * Number of convictions against the Current Director
     * @param numberConvictions Value for Integer
     */
    @JsonSetter("NumberConvictions")
    public void setNumberConvictions(Integer numberConvictions) {
        this.numberConvictions = numberConvictions;
    }

    /**
     * Getter for ConvictionDetails.
     * @return Returns the List of ConvictionDetails
     */
    @JsonGetter("ConvictionDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ConvictionDetails> getConvictionDetails() {
        return convictionDetails;
    }

    /**
     * Setter for ConvictionDetails.
     * @param convictionDetails Value for List of ConvictionDetails
     */
    @JsonSetter("ConvictionDetails")
    public void setConvictionDetails(List<ConvictionDetails> convictionDetails) {
        this.convictionDetails = convictionDetails;
    }

    /**
     * Getter for DirectorDetails.
     * @return Returns the DirectorDetails
     */
    @JsonGetter("DirectorDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DirectorDetails getDirectorDetails() {
        return directorDetails;
    }

    /**
     * Setter for DirectorDetails.
     * @param directorDetails Value for DirectorDetails
     */
    @JsonSetter("DirectorDetails")
    public void setDirectorDetails(DirectorDetails directorDetails) {
        this.directorDetails = directorDetails;
    }

    /**
     * Converts this CurrentDirectors into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CurrentDirectors [" + "foreignAddressFlag=" + foreignAddressFlag
                + ", directorCompanyFlag=" + directorCompanyFlag + ", directorNumber="
                + directorNumber + ", appointmentDate=" + appointmentDate
                + ", appointmentIndicator=" + appointmentIndicator + ", directorshipLength="
                + directorshipLength + ", latestReturns=" + latestReturns + ", nOCRef=" + nOCRef
                + ", numberConvictions=" + numberConvictions + ", convictionDetails="
                + convictionDetails + ", directorDetails=" + directorDetails + "]";
    }

    /**
     * Builds a new {@link CurrentDirectors.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CurrentDirectors.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .foreignAddressFlag(getForeignAddressFlag())
                .directorCompanyFlag(getDirectorCompanyFlag())
                .directorNumber(getDirectorNumber())
                .appointmentDate(getAppointmentDate())
                .appointmentIndicator(getAppointmentIndicator())
                .directorshipLength(getDirectorshipLength())
                .latestReturns(getLatestReturns())
                .nOCRef(getNOCRef())
                .numberConvictions(getNumberConvictions())
                .convictionDetails(getConvictionDetails())
                .directorDetails(getDirectorDetails());
        return builder;
    }

    /**
     * Class to build instances of {@link CurrentDirectors}.
     */
    public static class Builder {
        private String foreignAddressFlag;
        private String directorCompanyFlag;
        private String directorNumber;
        private String appointmentDate;
        private String appointmentIndicator;
        private Integer directorshipLength;
        private String latestReturns;
        private String nOCRef;
        private Integer numberConvictions;
        private List<ConvictionDetails> convictionDetails;
        private DirectorDetails directorDetails;



        /**
         * Setter for foreignAddressFlag.
         * @param  foreignAddressFlag  String value for foreignAddressFlag.
         * @return Builder
         */
        public Builder foreignAddressFlag(String foreignAddressFlag) {
            this.foreignAddressFlag = foreignAddressFlag;
            return this;
        }

        /**
         * Setter for directorCompanyFlag.
         * @param  directorCompanyFlag  String value for directorCompanyFlag.
         * @return Builder
         */
        public Builder directorCompanyFlag(String directorCompanyFlag) {
            this.directorCompanyFlag = directorCompanyFlag;
            return this;
        }

        /**
         * Setter for directorNumber.
         * @param  directorNumber  String value for directorNumber.
         * @return Builder
         */
        public Builder directorNumber(String directorNumber) {
            this.directorNumber = directorNumber;
            return this;
        }

        /**
         * Setter for appointmentDate.
         * @param  appointmentDate  String value for appointmentDate.
         * @return Builder
         */
        public Builder appointmentDate(String appointmentDate) {
            this.appointmentDate = appointmentDate;
            return this;
        }

        /**
         * Setter for appointmentIndicator.
         * @param  appointmentIndicator  String value for appointmentIndicator.
         * @return Builder
         */
        public Builder appointmentIndicator(String appointmentIndicator) {
            this.appointmentIndicator = appointmentIndicator;
            return this;
        }

        /**
         * Setter for directorshipLength.
         * @param  directorshipLength  Integer value for directorshipLength.
         * @return Builder
         */
        public Builder directorshipLength(Integer directorshipLength) {
            this.directorshipLength = directorshipLength;
            return this;
        }

        /**
         * Setter for latestReturns.
         * @param  latestReturns  String value for latestReturns.
         * @return Builder
         */
        public Builder latestReturns(String latestReturns) {
            this.latestReturns = latestReturns;
            return this;
        }

        /**
         * Setter for nOCRef.
         * @param  nOCRef  String value for nOCRef.
         * @return Builder
         */
        public Builder nOCRef(String nOCRef) {
            this.nOCRef = nOCRef;
            return this;
        }

        /**
         * Setter for numberConvictions.
         * @param  numberConvictions  Integer value for numberConvictions.
         * @return Builder
         */
        public Builder numberConvictions(Integer numberConvictions) {
            this.numberConvictions = numberConvictions;
            return this;
        }

        /**
         * Setter for convictionDetails.
         * @param  convictionDetails  List of ConvictionDetails value for convictionDetails.
         * @return Builder
         */
        public Builder convictionDetails(List<ConvictionDetails> convictionDetails) {
            this.convictionDetails = convictionDetails;
            return this;
        }

        /**
         * Setter for directorDetails.
         * @param  directorDetails  DirectorDetails value for directorDetails.
         * @return Builder
         */
        public Builder directorDetails(DirectorDetails directorDetails) {
            this.directorDetails = directorDetails;
            return this;
        }

        /**
         * Builds a new {@link CurrentDirectors} object using the set fields.
         * @return {@link CurrentDirectors}
         */
        public CurrentDirectors build() {
            return new CurrentDirectors(foreignAddressFlag, directorCompanyFlag, directorNumber,
                    appointmentDate, appointmentIndicator, directorshipLength, latestReturns,
                    nOCRef, numberConvictions, convictionDetails, directorDetails);
        }
    }
}
