/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for ProfitLoss type.
 */
public class ProfitLoss {
    private TurnOverSalesDetails turnoverSalesDetails;
    private Double costOfSales;
    private Double exceptionalItemsPreGP;
    private Double otherDirectItems;
    private Double totalExpenses;
    private Double grossProfit;
    private Double operatingExpenses;
    private Double operatingIncome;
    private Double exceptionalItemsPreOP;
    private Double profitLossOnDisposal;
    private Double operatingProfit;
    private Double shareOfProfits;
    private Double otherIncome;
    private Double interestReceivable;
    private InterestPayableDetails interestPayableDetails;
    private Double otherTransactions;
    private Double exceptionalItemsPreEBT;
    private Double preTaxProfitLoss;
    private Double taxation;
    private Double extraordinaryItems;
    private Double minorityInterestsUKGAAP;
    private Double dividends;
    private Double netProfitLoss;

    /**
     * Default constructor.
     */
    public ProfitLoss() {
    }

    /**
     * Initialization constructor.
     * @param  turnoverSalesDetails  TurnOverSalesDetails value for turnoverSalesDetails.
     * @param  costOfSales  Double value for costOfSales.
     * @param  exceptionalItemsPreGP  Double value for exceptionalItemsPreGP.
     * @param  otherDirectItems  Double value for otherDirectItems.
     * @param  totalExpenses  Double value for totalExpenses.
     * @param  grossProfit  Double value for grossProfit.
     * @param  operatingExpenses  Double value for operatingExpenses.
     * @param  operatingIncome  Double value for operatingIncome.
     * @param  exceptionalItemsPreOP  Double value for exceptionalItemsPreOP.
     * @param  profitLossOnDisposal  Double value for profitLossOnDisposal.
     * @param  operatingProfit  Double value for operatingProfit.
     * @param  shareOfProfits  Double value for shareOfProfits.
     * @param  otherIncome  Double value for otherIncome.
     * @param  interestReceivable  Double value for interestReceivable.
     * @param  interestPayableDetails  InterestPayableDetails value for interestPayableDetails.
     * @param  otherTransactions  Double value for otherTransactions.
     * @param  exceptionalItemsPreEBT  Double value for exceptionalItemsPreEBT.
     * @param  preTaxProfitLoss  Double value for preTaxProfitLoss.
     * @param  taxation  Double value for taxation.
     * @param  extraordinaryItems  Double value for extraordinaryItems.
     * @param  minorityInterestsUKGAAP  Double value for minorityInterestsUKGAAP.
     * @param  dividends  Double value for dividends.
     * @param  netProfitLoss  Double value for netProfitLoss.
     */
    public ProfitLoss(
            TurnOverSalesDetails turnoverSalesDetails,
            Double costOfSales,
            Double exceptionalItemsPreGP,
            Double otherDirectItems,
            Double totalExpenses,
            Double grossProfit,
            Double operatingExpenses,
            Double operatingIncome,
            Double exceptionalItemsPreOP,
            Double profitLossOnDisposal,
            Double operatingProfit,
            Double shareOfProfits,
            Double otherIncome,
            Double interestReceivable,
            InterestPayableDetails interestPayableDetails,
            Double otherTransactions,
            Double exceptionalItemsPreEBT,
            Double preTaxProfitLoss,
            Double taxation,
            Double extraordinaryItems,
            Double minorityInterestsUKGAAP,
            Double dividends,
            Double netProfitLoss) {
        this.turnoverSalesDetails = turnoverSalesDetails;
        this.costOfSales = costOfSales;
        this.exceptionalItemsPreGP = exceptionalItemsPreGP;
        this.otherDirectItems = otherDirectItems;
        this.totalExpenses = totalExpenses;
        this.grossProfit = grossProfit;
        this.operatingExpenses = operatingExpenses;
        this.operatingIncome = operatingIncome;
        this.exceptionalItemsPreOP = exceptionalItemsPreOP;
        this.profitLossOnDisposal = profitLossOnDisposal;
        this.operatingProfit = operatingProfit;
        this.shareOfProfits = shareOfProfits;
        this.otherIncome = otherIncome;
        this.interestReceivable = interestReceivable;
        this.interestPayableDetails = interestPayableDetails;
        this.otherTransactions = otherTransactions;
        this.exceptionalItemsPreEBT = exceptionalItemsPreEBT;
        this.preTaxProfitLoss = preTaxProfitLoss;
        this.taxation = taxation;
        this.extraordinaryItems = extraordinaryItems;
        this.minorityInterestsUKGAAP = minorityInterestsUKGAAP;
        this.dividends = dividends;
        this.netProfitLoss = netProfitLoss;
    }

    /**
     * Getter for TurnoverSalesDetails.
     * @return Returns the TurnOverSalesDetails
     */
    @JsonGetter("TurnoverSalesDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TurnOverSalesDetails getTurnoverSalesDetails() {
        return turnoverSalesDetails;
    }

    /**
     * Setter for TurnoverSalesDetails.
     * @param turnoverSalesDetails Value for TurnOverSalesDetails
     */
    @JsonSetter("TurnoverSalesDetails")
    public void setTurnoverSalesDetails(TurnOverSalesDetails turnoverSalesDetails) {
        this.turnoverSalesDetails = turnoverSalesDetails;
    }

    /**
     * Getter for CostOfSales.
     * Value for Profit & Loss - Cost of Sales for these accounts
     * @return Returns the Double
     */
    @JsonGetter("CostOfSales")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCostOfSales() {
        return costOfSales;
    }

    /**
     * Setter for CostOfSales.
     * Value for Profit & Loss - Cost of Sales for these accounts
     * @param costOfSales Value for Double
     */
    @JsonSetter("CostOfSales")
    public void setCostOfSales(Double costOfSales) {
        this.costOfSales = costOfSales;
    }

    /**
     * Getter for ExceptionalItemsPreGP.
     * Value for Profit & Loss - Exceptional Items (Pre Gross Profit) for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ExceptionalItemsPreGP")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getExceptionalItemsPreGP() {
        return exceptionalItemsPreGP;
    }

    /**
     * Setter for ExceptionalItemsPreGP.
     * Value for Profit & Loss - Exceptional Items (Pre Gross Profit) for these accounts
     * @param exceptionalItemsPreGP Value for Double
     */
    @JsonSetter("ExceptionalItemsPreGP")
    public void setExceptionalItemsPreGP(Double exceptionalItemsPreGP) {
        this.exceptionalItemsPreGP = exceptionalItemsPreGP;
    }

    /**
     * Getter for OtherDirectItems.
     * Value for Profit & Loss - Other Direct Items for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OtherDirectItems")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOtherDirectItems() {
        return otherDirectItems;
    }

    /**
     * Setter for OtherDirectItems.
     * Value for Profit & Loss - Other Direct Items for these accounts
     * @param otherDirectItems Value for Double
     */
    @JsonSetter("OtherDirectItems")
    public void setOtherDirectItems(Double otherDirectItems) {
        this.otherDirectItems = otherDirectItems;
    }

    /**
     * Getter for TotalExpenses.
     * Value for Profit & Loss - Total Expenses for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TotalExpenses")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalExpenses() {
        return totalExpenses;
    }

    /**
     * Setter for TotalExpenses.
     * Value for Profit & Loss - Total Expenses for these accounts
     * @param totalExpenses Value for Double
     */
    @JsonSetter("TotalExpenses")
    public void setTotalExpenses(Double totalExpenses) {
        this.totalExpenses = totalExpenses;
    }

    /**
     * Getter for GrossProfit.
     * Value for Profit & Loss - Gross Profit for these accounts
     * @return Returns the Double
     */
    @JsonGetter("GrossProfit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getGrossProfit() {
        return grossProfit;
    }

    /**
     * Setter for GrossProfit.
     * Value for Profit & Loss - Gross Profit for these accounts
     * @param grossProfit Value for Double
     */
    @JsonSetter("GrossProfit")
    public void setGrossProfit(Double grossProfit) {
        this.grossProfit = grossProfit;
    }

    /**
     * Getter for OperatingExpenses.
     * Value for Profit & Loss - Operating Expenses for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OperatingExpenses")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOperatingExpenses() {
        return operatingExpenses;
    }

    /**
     * Setter for OperatingExpenses.
     * Value for Profit & Loss - Operating Expenses for these accounts
     * @param operatingExpenses Value for Double
     */
    @JsonSetter("OperatingExpenses")
    public void setOperatingExpenses(Double operatingExpenses) {
        this.operatingExpenses = operatingExpenses;
    }

    /**
     * Getter for OperatingIncome.
     * Value for Profit & Loss - Operating Income for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OperatingIncome")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOperatingIncome() {
        return operatingIncome;
    }

    /**
     * Setter for OperatingIncome.
     * Value for Profit & Loss - Operating Income for these accounts
     * @param operatingIncome Value for Double
     */
    @JsonSetter("OperatingIncome")
    public void setOperatingIncome(Double operatingIncome) {
        this.operatingIncome = operatingIncome;
    }

    /**
     * Getter for ExceptionalItemsPreOP.
     * Value for Profit & Loss - Exceptional Items (Pre Operating Profit) for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ExceptionalItemsPreOP")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getExceptionalItemsPreOP() {
        return exceptionalItemsPreOP;
    }

    /**
     * Setter for ExceptionalItemsPreOP.
     * Value for Profit & Loss - Exceptional Items (Pre Operating Profit) for these accounts
     * @param exceptionalItemsPreOP Value for Double
     */
    @JsonSetter("ExceptionalItemsPreOP")
    public void setExceptionalItemsPreOP(Double exceptionalItemsPreOP) {
        this.exceptionalItemsPreOP = exceptionalItemsPreOP;
    }

    /**
     * Getter for ProfitLossOnDisposal.
     * Value for Profit & Loss - Profit Loss On Disposal for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ProfitLossOnDisposal")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getProfitLossOnDisposal() {
        return profitLossOnDisposal;
    }

    /**
     * Setter for ProfitLossOnDisposal.
     * Value for Profit & Loss - Profit Loss On Disposal for these accounts
     * @param profitLossOnDisposal Value for Double
     */
    @JsonSetter("ProfitLossOnDisposal")
    public void setProfitLossOnDisposal(Double profitLossOnDisposal) {
        this.profitLossOnDisposal = profitLossOnDisposal;
    }

    /**
     * Getter for OperatingProfit.
     * Value for Profit & Loss - Operating Profit for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OperatingProfit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOperatingProfit() {
        return operatingProfit;
    }

    /**
     * Setter for OperatingProfit.
     * Value for Profit & Loss - Operating Profit for these accounts
     * @param operatingProfit Value for Double
     */
    @JsonSetter("OperatingProfit")
    public void setOperatingProfit(Double operatingProfit) {
        this.operatingProfit = operatingProfit;
    }

    /**
     * Getter for ShareOfProfits.
     * Value for Profit & Loss - Share of Profits for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ShareOfProfits")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getShareOfProfits() {
        return shareOfProfits;
    }

    /**
     * Setter for ShareOfProfits.
     * Value for Profit & Loss - Share of Profits for these accounts
     * @param shareOfProfits Value for Double
     */
    @JsonSetter("ShareOfProfits")
    public void setShareOfProfits(Double shareOfProfits) {
        this.shareOfProfits = shareOfProfits;
    }

    /**
     * Getter for OtherIncome.
     * Value for Profit & Loss - Other Income for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OtherIncome")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOtherIncome() {
        return otherIncome;
    }

    /**
     * Setter for OtherIncome.
     * Value for Profit & Loss - Other Income for these accounts
     * @param otherIncome Value for Double
     */
    @JsonSetter("OtherIncome")
    public void setOtherIncome(Double otherIncome) {
        this.otherIncome = otherIncome;
    }

    /**
     * Getter for InterestReceivable.
     * Value for Profit & Loss - Interest Receivable for these accounts
     * @return Returns the Double
     */
    @JsonGetter("InterestReceivable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getInterestReceivable() {
        return interestReceivable;
    }

    /**
     * Setter for InterestReceivable.
     * Value for Profit & Loss - Interest Receivable for these accounts
     * @param interestReceivable Value for Double
     */
    @JsonSetter("InterestReceivable")
    public void setInterestReceivable(Double interestReceivable) {
        this.interestReceivable = interestReceivable;
    }

    /**
     * Getter for InterestPayableDetails.
     * @return Returns the InterestPayableDetails
     */
    @JsonGetter("InterestPayableDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InterestPayableDetails getInterestPayableDetails() {
        return interestPayableDetails;
    }

    /**
     * Setter for InterestPayableDetails.
     * @param interestPayableDetails Value for InterestPayableDetails
     */
    @JsonSetter("InterestPayableDetails")
    public void setInterestPayableDetails(InterestPayableDetails interestPayableDetails) {
        this.interestPayableDetails = interestPayableDetails;
    }

    /**
     * Getter for OtherTransactions.
     * Value for Profit & Loss - Other Transactions for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OtherTransactions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOtherTransactions() {
        return otherTransactions;
    }

    /**
     * Setter for OtherTransactions.
     * Value for Profit & Loss - Other Transactions for these accounts
     * @param otherTransactions Value for Double
     */
    @JsonSetter("OtherTransactions")
    public void setOtherTransactions(Double otherTransactions) {
        this.otherTransactions = otherTransactions;
    }

    /**
     * Getter for ExceptionalItemsPreEBT.
     * Value for Profit & Loss - Exceptional Items (Pre EBT) for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ExceptionalItemsPreEBT")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getExceptionalItemsPreEBT() {
        return exceptionalItemsPreEBT;
    }

    /**
     * Setter for ExceptionalItemsPreEBT.
     * Value for Profit & Loss - Exceptional Items (Pre EBT) for these accounts
     * @param exceptionalItemsPreEBT Value for Double
     */
    @JsonSetter("ExceptionalItemsPreEBT")
    public void setExceptionalItemsPreEBT(Double exceptionalItemsPreEBT) {
        this.exceptionalItemsPreEBT = exceptionalItemsPreEBT;
    }

    /**
     * Getter for PreTaxProfitLoss.
     * Value for Profit & Loss - Pre-Tax Profit & Loss for these accounts
     * @return Returns the Double
     */
    @JsonGetter("PreTaxProfitLoss")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getPreTaxProfitLoss() {
        return preTaxProfitLoss;
    }

    /**
     * Setter for PreTaxProfitLoss.
     * Value for Profit & Loss - Pre-Tax Profit & Loss for these accounts
     * @param preTaxProfitLoss Value for Double
     */
    @JsonSetter("PreTaxProfitLoss")
    public void setPreTaxProfitLoss(Double preTaxProfitLoss) {
        this.preTaxProfitLoss = preTaxProfitLoss;
    }

    /**
     * Getter for Taxation.
     * Value for Profit & Loss - Taxation for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Taxation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTaxation() {
        return taxation;
    }

    /**
     * Setter for Taxation.
     * Value for Profit & Loss - Taxation for these accounts
     * @param taxation Value for Double
     */
    @JsonSetter("Taxation")
    public void setTaxation(Double taxation) {
        this.taxation = taxation;
    }

    /**
     * Getter for ExtraordinaryItems.
     * Value for Profit & Loss - Extraordinary Items for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ExtraordinaryItems")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getExtraordinaryItems() {
        return extraordinaryItems;
    }

    /**
     * Setter for ExtraordinaryItems.
     * Value for Profit & Loss - Extraordinary Items for these accounts
     * @param extraordinaryItems Value for Double
     */
    @JsonSetter("ExtraordinaryItems")
    public void setExtraordinaryItems(Double extraordinaryItems) {
        this.extraordinaryItems = extraordinaryItems;
    }

    /**
     * Getter for MinorityInterestsUKGAAP.
     * Value for Profit & Loss - Minority Interests for these accounts (applicable to UK GAAP only)
     * @return Returns the Double
     */
    @JsonGetter("MinorityInterestsUKGAAP")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getMinorityInterestsUKGAAP() {
        return minorityInterestsUKGAAP;
    }

    /**
     * Setter for MinorityInterestsUKGAAP.
     * Value for Profit & Loss - Minority Interests for these accounts (applicable to UK GAAP only)
     * @param minorityInterestsUKGAAP Value for Double
     */
    @JsonSetter("MinorityInterestsUKGAAP")
    public void setMinorityInterestsUKGAAP(Double minorityInterestsUKGAAP) {
        this.minorityInterestsUKGAAP = minorityInterestsUKGAAP;
    }

    /**
     * Getter for Dividends.
     * Value for Profit & Loss - Dividends for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Dividends")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDividends() {
        return dividends;
    }

    /**
     * Setter for Dividends.
     * Value for Profit & Loss - Dividends for these accounts
     * @param dividends Value for Double
     */
    @JsonSetter("Dividends")
    public void setDividends(Double dividends) {
        this.dividends = dividends;
    }

    /**
     * Getter for NetProfitLoss.
     * Value for Profit & Loss - Net Profit & Loss for these accounts
     * @return Returns the Double
     */
    @JsonGetter("NetProfitLoss")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getNetProfitLoss() {
        return netProfitLoss;
    }

    /**
     * Setter for NetProfitLoss.
     * Value for Profit & Loss - Net Profit & Loss for these accounts
     * @param netProfitLoss Value for Double
     */
    @JsonSetter("NetProfitLoss")
    public void setNetProfitLoss(Double netProfitLoss) {
        this.netProfitLoss = netProfitLoss;
    }

    /**
     * Converts this ProfitLoss into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ProfitLoss [" + "turnoverSalesDetails=" + turnoverSalesDetails + ", costOfSales="
                + costOfSales + ", exceptionalItemsPreGP=" + exceptionalItemsPreGP
                + ", otherDirectItems=" + otherDirectItems + ", totalExpenses=" + totalExpenses
                + ", grossProfit=" + grossProfit + ", operatingExpenses=" + operatingExpenses
                + ", operatingIncome=" + operatingIncome + ", exceptionalItemsPreOP="
                + exceptionalItemsPreOP + ", profitLossOnDisposal=" + profitLossOnDisposal
                + ", operatingProfit=" + operatingProfit + ", shareOfProfits=" + shareOfProfits
                + ", otherIncome=" + otherIncome + ", interestReceivable=" + interestReceivable
                + ", interestPayableDetails=" + interestPayableDetails + ", otherTransactions="
                + otherTransactions + ", exceptionalItemsPreEBT=" + exceptionalItemsPreEBT
                + ", preTaxProfitLoss=" + preTaxProfitLoss + ", taxation=" + taxation
                + ", extraordinaryItems=" + extraordinaryItems + ", minorityInterestsUKGAAP="
                + minorityInterestsUKGAAP + ", dividends=" + dividends + ", netProfitLoss="
                + netProfitLoss + "]";
    }

    /**
     * Builds a new {@link ProfitLoss.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ProfitLoss.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .turnoverSalesDetails(getTurnoverSalesDetails())
                .costOfSales(getCostOfSales())
                .exceptionalItemsPreGP(getExceptionalItemsPreGP())
                .otherDirectItems(getOtherDirectItems())
                .totalExpenses(getTotalExpenses())
                .grossProfit(getGrossProfit())
                .operatingExpenses(getOperatingExpenses())
                .operatingIncome(getOperatingIncome())
                .exceptionalItemsPreOP(getExceptionalItemsPreOP())
                .profitLossOnDisposal(getProfitLossOnDisposal())
                .operatingProfit(getOperatingProfit())
                .shareOfProfits(getShareOfProfits())
                .otherIncome(getOtherIncome())
                .interestReceivable(getInterestReceivable())
                .interestPayableDetails(getInterestPayableDetails())
                .otherTransactions(getOtherTransactions())
                .exceptionalItemsPreEBT(getExceptionalItemsPreEBT())
                .preTaxProfitLoss(getPreTaxProfitLoss())
                .taxation(getTaxation())
                .extraordinaryItems(getExtraordinaryItems())
                .minorityInterestsUKGAAP(getMinorityInterestsUKGAAP())
                .dividends(getDividends())
                .netProfitLoss(getNetProfitLoss());
        return builder;
    }

    /**
     * Class to build instances of {@link ProfitLoss}.
     */
    public static class Builder {
        private TurnOverSalesDetails turnoverSalesDetails;
        private Double costOfSales;
        private Double exceptionalItemsPreGP;
        private Double otherDirectItems;
        private Double totalExpenses;
        private Double grossProfit;
        private Double operatingExpenses;
        private Double operatingIncome;
        private Double exceptionalItemsPreOP;
        private Double profitLossOnDisposal;
        private Double operatingProfit;
        private Double shareOfProfits;
        private Double otherIncome;
        private Double interestReceivable;
        private InterestPayableDetails interestPayableDetails;
        private Double otherTransactions;
        private Double exceptionalItemsPreEBT;
        private Double preTaxProfitLoss;
        private Double taxation;
        private Double extraordinaryItems;
        private Double minorityInterestsUKGAAP;
        private Double dividends;
        private Double netProfitLoss;



        /**
         * Setter for turnoverSalesDetails.
         * @param  turnoverSalesDetails  TurnOverSalesDetails value for turnoverSalesDetails.
         * @return Builder
         */
        public Builder turnoverSalesDetails(TurnOverSalesDetails turnoverSalesDetails) {
            this.turnoverSalesDetails = turnoverSalesDetails;
            return this;
        }

        /**
         * Setter for costOfSales.
         * @param  costOfSales  Double value for costOfSales.
         * @return Builder
         */
        public Builder costOfSales(Double costOfSales) {
            this.costOfSales = costOfSales;
            return this;
        }

        /**
         * Setter for exceptionalItemsPreGP.
         * @param  exceptionalItemsPreGP  Double value for exceptionalItemsPreGP.
         * @return Builder
         */
        public Builder exceptionalItemsPreGP(Double exceptionalItemsPreGP) {
            this.exceptionalItemsPreGP = exceptionalItemsPreGP;
            return this;
        }

        /**
         * Setter for otherDirectItems.
         * @param  otherDirectItems  Double value for otherDirectItems.
         * @return Builder
         */
        public Builder otherDirectItems(Double otherDirectItems) {
            this.otherDirectItems = otherDirectItems;
            return this;
        }

        /**
         * Setter for totalExpenses.
         * @param  totalExpenses  Double value for totalExpenses.
         * @return Builder
         */
        public Builder totalExpenses(Double totalExpenses) {
            this.totalExpenses = totalExpenses;
            return this;
        }

        /**
         * Setter for grossProfit.
         * @param  grossProfit  Double value for grossProfit.
         * @return Builder
         */
        public Builder grossProfit(Double grossProfit) {
            this.grossProfit = grossProfit;
            return this;
        }

        /**
         * Setter for operatingExpenses.
         * @param  operatingExpenses  Double value for operatingExpenses.
         * @return Builder
         */
        public Builder operatingExpenses(Double operatingExpenses) {
            this.operatingExpenses = operatingExpenses;
            return this;
        }

        /**
         * Setter for operatingIncome.
         * @param  operatingIncome  Double value for operatingIncome.
         * @return Builder
         */
        public Builder operatingIncome(Double operatingIncome) {
            this.operatingIncome = operatingIncome;
            return this;
        }

        /**
         * Setter for exceptionalItemsPreOP.
         * @param  exceptionalItemsPreOP  Double value for exceptionalItemsPreOP.
         * @return Builder
         */
        public Builder exceptionalItemsPreOP(Double exceptionalItemsPreOP) {
            this.exceptionalItemsPreOP = exceptionalItemsPreOP;
            return this;
        }

        /**
         * Setter for profitLossOnDisposal.
         * @param  profitLossOnDisposal  Double value for profitLossOnDisposal.
         * @return Builder
         */
        public Builder profitLossOnDisposal(Double profitLossOnDisposal) {
            this.profitLossOnDisposal = profitLossOnDisposal;
            return this;
        }

        /**
         * Setter for operatingProfit.
         * @param  operatingProfit  Double value for operatingProfit.
         * @return Builder
         */
        public Builder operatingProfit(Double operatingProfit) {
            this.operatingProfit = operatingProfit;
            return this;
        }

        /**
         * Setter for shareOfProfits.
         * @param  shareOfProfits  Double value for shareOfProfits.
         * @return Builder
         */
        public Builder shareOfProfits(Double shareOfProfits) {
            this.shareOfProfits = shareOfProfits;
            return this;
        }

        /**
         * Setter for otherIncome.
         * @param  otherIncome  Double value for otherIncome.
         * @return Builder
         */
        public Builder otherIncome(Double otherIncome) {
            this.otherIncome = otherIncome;
            return this;
        }

        /**
         * Setter for interestReceivable.
         * @param  interestReceivable  Double value for interestReceivable.
         * @return Builder
         */
        public Builder interestReceivable(Double interestReceivable) {
            this.interestReceivable = interestReceivable;
            return this;
        }

        /**
         * Setter for interestPayableDetails.
         * @param  interestPayableDetails  InterestPayableDetails value for interestPayableDetails.
         * @return Builder
         */
        public Builder interestPayableDetails(InterestPayableDetails interestPayableDetails) {
            this.interestPayableDetails = interestPayableDetails;
            return this;
        }

        /**
         * Setter for otherTransactions.
         * @param  otherTransactions  Double value for otherTransactions.
         * @return Builder
         */
        public Builder otherTransactions(Double otherTransactions) {
            this.otherTransactions = otherTransactions;
            return this;
        }

        /**
         * Setter for exceptionalItemsPreEBT.
         * @param  exceptionalItemsPreEBT  Double value for exceptionalItemsPreEBT.
         * @return Builder
         */
        public Builder exceptionalItemsPreEBT(Double exceptionalItemsPreEBT) {
            this.exceptionalItemsPreEBT = exceptionalItemsPreEBT;
            return this;
        }

        /**
         * Setter for preTaxProfitLoss.
         * @param  preTaxProfitLoss  Double value for preTaxProfitLoss.
         * @return Builder
         */
        public Builder preTaxProfitLoss(Double preTaxProfitLoss) {
            this.preTaxProfitLoss = preTaxProfitLoss;
            return this;
        }

        /**
         * Setter for taxation.
         * @param  taxation  Double value for taxation.
         * @return Builder
         */
        public Builder taxation(Double taxation) {
            this.taxation = taxation;
            return this;
        }

        /**
         * Setter for extraordinaryItems.
         * @param  extraordinaryItems  Double value for extraordinaryItems.
         * @return Builder
         */
        public Builder extraordinaryItems(Double extraordinaryItems) {
            this.extraordinaryItems = extraordinaryItems;
            return this;
        }

        /**
         * Setter for minorityInterestsUKGAAP.
         * @param  minorityInterestsUKGAAP  Double value for minorityInterestsUKGAAP.
         * @return Builder
         */
        public Builder minorityInterestsUKGAAP(Double minorityInterestsUKGAAP) {
            this.minorityInterestsUKGAAP = minorityInterestsUKGAAP;
            return this;
        }

        /**
         * Setter for dividends.
         * @param  dividends  Double value for dividends.
         * @return Builder
         */
        public Builder dividends(Double dividends) {
            this.dividends = dividends;
            return this;
        }

        /**
         * Setter for netProfitLoss.
         * @param  netProfitLoss  Double value for netProfitLoss.
         * @return Builder
         */
        public Builder netProfitLoss(Double netProfitLoss) {
            this.netProfitLoss = netProfitLoss;
            return this;
        }

        /**
         * Builds a new {@link ProfitLoss} object using the set fields.
         * @return {@link ProfitLoss}
         */
        public ProfitLoss build() {
            return new ProfitLoss(turnoverSalesDetails, costOfSales, exceptionalItemsPreGP,
                    otherDirectItems, totalExpenses, grossProfit, operatingExpenses,
                    operatingIncome, exceptionalItemsPreOP, profitLossOnDisposal, operatingProfit,
                    shareOfProfits, otherIncome, interestReceivable, interestPayableDetails,
                    otherTransactions, exceptionalItemsPreEBT, preTaxProfitLoss, taxation,
                    extraordinaryItems, minorityInterestsUKGAAP, dividends, netProfitLoss);
        }
    }
}
