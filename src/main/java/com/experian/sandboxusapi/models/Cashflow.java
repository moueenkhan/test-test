/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Cashflow type.
 */
public class Cashflow {
    private String dateOfAccounts;
    private Integer accountingPeriod;
    private String currency;
    private String currencyMultiplier;
    private String companyClass;
    private String consAccounts;
    private String dormancyIndicator;
    private String latestAccountsType;
    private String restatedAccounts;
    private Double operatingActivities;
    private Double returnOnInvestment;
    private Double tax;
    private Double capitalExpenditure;
    private Double acquisitions;
    private Double equityDivision;
    private Double managementLiquidity;
    private Double financing;
    private Double totalCash;
    private Double iFRSOperatingActivities;
    private Double iFRSInvestmentActivities;
    private Double financingActs;
    private Double netChange;
    private Double cashBroughtForward;
    private Double exchangeRateEffects;
    private Double cashEquivalents;

    /**
     * Default constructor.
     */
    public Cashflow() {
    }

    /**
     * Initialization constructor.
     * @param  dateOfAccounts  String value for dateOfAccounts.
     * @param  accountingPeriod  Integer value for accountingPeriod.
     * @param  currency  String value for currency.
     * @param  currencyMultiplier  String value for currencyMultiplier.
     * @param  companyClass  String value for companyClass.
     * @param  consAccounts  String value for consAccounts.
     * @param  dormancyIndicator  String value for dormancyIndicator.
     * @param  latestAccountsType  String value for latestAccountsType.
     * @param  restatedAccounts  String value for restatedAccounts.
     * @param  operatingActivities  Double value for operatingActivities.
     * @param  returnOnInvestment  Double value for returnOnInvestment.
     * @param  tax  Double value for tax.
     * @param  capitalExpenditure  Double value for capitalExpenditure.
     * @param  acquisitions  Double value for acquisitions.
     * @param  equityDivision  Double value for equityDivision.
     * @param  managementLiquidity  Double value for managementLiquidity.
     * @param  financing  Double value for financing.
     * @param  totalCash  Double value for totalCash.
     * @param  iFRSOperatingActivities  Double value for iFRSOperatingActivities.
     * @param  iFRSInvestmentActivities  Double value for iFRSInvestmentActivities.
     * @param  financingActs  Double value for financingActs.
     * @param  netChange  Double value for netChange.
     * @param  cashBroughtForward  Double value for cashBroughtForward.
     * @param  exchangeRateEffects  Double value for exchangeRateEffects.
     * @param  cashEquivalents  Double value for cashEquivalents.
     */
    public Cashflow(
            String dateOfAccounts,
            Integer accountingPeriod,
            String currency,
            String currencyMultiplier,
            String companyClass,
            String consAccounts,
            String dormancyIndicator,
            String latestAccountsType,
            String restatedAccounts,
            Double operatingActivities,
            Double returnOnInvestment,
            Double tax,
            Double capitalExpenditure,
            Double acquisitions,
            Double equityDivision,
            Double managementLiquidity,
            Double financing,
            Double totalCash,
            Double iFRSOperatingActivities,
            Double iFRSInvestmentActivities,
            Double financingActs,
            Double netChange,
            Double cashBroughtForward,
            Double exchangeRateEffects,
            Double cashEquivalents) {
        this.dateOfAccounts = dateOfAccounts;
        this.accountingPeriod = accountingPeriod;
        this.currency = currency;
        this.currencyMultiplier = currencyMultiplier;
        this.companyClass = companyClass;
        this.consAccounts = consAccounts;
        this.dormancyIndicator = dormancyIndicator;
        this.latestAccountsType = latestAccountsType;
        this.restatedAccounts = restatedAccounts;
        this.operatingActivities = operatingActivities;
        this.returnOnInvestment = returnOnInvestment;
        this.tax = tax;
        this.capitalExpenditure = capitalExpenditure;
        this.acquisitions = acquisitions;
        this.equityDivision = equityDivision;
        this.managementLiquidity = managementLiquidity;
        this.financing = financing;
        this.totalCash = totalCash;
        this.iFRSOperatingActivities = iFRSOperatingActivities;
        this.iFRSInvestmentActivities = iFRSInvestmentActivities;
        this.financingActs = financingActs;
        this.netChange = netChange;
        this.cashBroughtForward = cashBroughtForward;
        this.exchangeRateEffects = exchangeRateEffects;
        this.cashEquivalents = cashEquivalents;
    }

    /**
     * Getter for DateOfAccounts.
     * Filing date for the limited company accounts (yyyy-mm-dd)
     * @return Returns the String
     */
    @JsonGetter("DateOfAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDateOfAccounts() {
        return dateOfAccounts;
    }

    /**
     * Setter for DateOfAccounts.
     * Filing date for the limited company accounts (yyyy-mm-dd)
     * @param dateOfAccounts Value for String
     */
    @JsonSetter("DateOfAccounts")
    public void setDateOfAccounts(String dateOfAccounts) {
        this.dateOfAccounts = dateOfAccounts;
    }

    /**
     * Getter for AccountingPeriod.
     * Number of weeks covered by this cash flow
     * @return Returns the Integer
     */
    @JsonGetter("AccountingPeriod")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getAccountingPeriod() {
        return accountingPeriod;
    }

    /**
     * Setter for AccountingPeriod.
     * Number of weeks covered by this cash flow
     * @param accountingPeriod Value for Integer
     */
    @JsonSetter("AccountingPeriod")
    public void setAccountingPeriod(Integer accountingPeriod) {
        this.accountingPeriod = accountingPeriod;
    }

    /**
     * Getter for Currency.
     * Currency under which the cash flow has been reported - ISO currency code
     * @return Returns the String
     */
    @JsonGetter("Currency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCurrency() {
        return currency;
    }

    /**
     * Setter for Currency.
     * Currency under which the cash flow has been reported - ISO currency code
     * @param currency Value for String
     */
    @JsonSetter("Currency")
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * Getter for CurrencyMultiplier.
     * Currency multiplier applicable to the cash flow - N = Financial fields in units; T =
     * Financial fields in thousands
     * @return Returns the String
     */
    @JsonGetter("CurrencyMultiplier")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCurrencyMultiplier() {
        return currencyMultiplier;
    }

    /**
     * Setter for CurrencyMultiplier.
     * Currency multiplier applicable to the cash flow - N = Financial fields in units; T =
     * Financial fields in thousands
     * @param currencyMultiplier Value for String
     */
    @JsonSetter("CurrencyMultiplier")
    public void setCurrencyMultiplier(String currencyMultiplier) {
        this.currencyMultiplier = currencyMultiplier;
    }

    /**
     * Getter for CompanyClass.
     * Size classification for the limited company - S = Small sized company; M= Medium sized
     * company; L = Large sized company
     * @return Returns the String
     */
    @JsonGetter("CompanyClass")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCompanyClass() {
        return companyClass;
    }

    /**
     * Setter for CompanyClass.
     * Size classification for the limited company - S = Small sized company; M= Medium sized
     * company; L = Large sized company
     * @param companyClass Value for String
     */
    @JsonSetter("CompanyClass")
    public void setCompanyClass(String companyClass) {
        this.companyClass = companyClass;
    }

    /**
     * Getter for ConsAccounts.
     * Indicator showing whether the accounts are consolidated - Y = Consolidated; N = Not
     * consolidated
     * @return Returns the String
     */
    @JsonGetter("ConsAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getConsAccounts() {
        return consAccounts;
    }

    /**
     * Setter for ConsAccounts.
     * Indicator showing whether the accounts are consolidated - Y = Consolidated; N = Not
     * consolidated
     * @param consAccounts Value for String
     */
    @JsonSetter("ConsAccounts")
    public void setConsAccounts(String consAccounts) {
        this.consAccounts = consAccounts;
    }

    /**
     * Getter for DormancyIndicator.
     * Indicator showing whether the limited company is dormant - Y = Dormant; N = Active; Q = Quasi
     * Dormant; C = Calculated as Dormant; A = Stated as Dormant on Accounts
     * @return Returns the String
     */
    @JsonGetter("DormancyIndicator")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDormancyIndicator() {
        return dormancyIndicator;
    }

    /**
     * Setter for DormancyIndicator.
     * Indicator showing whether the limited company is dormant - Y = Dormant; N = Active; Q = Quasi
     * Dormant; C = Calculated as Dormant; A = Stated as Dormant on Accounts
     * @param dormancyIndicator Value for String
     */
    @JsonSetter("DormancyIndicator")
    public void setDormancyIndicator(String dormancyIndicator) {
        this.dormancyIndicator = dormancyIndicator;
    }

    /**
     * Getter for LatestAccountsType.
     * Indicator of accounting method used to prepare the cash flow- I = IFRS; G = GAAP
     * @return Returns the String
     */
    @JsonGetter("LatestAccountsType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLatestAccountsType() {
        return latestAccountsType;
    }

    /**
     * Setter for LatestAccountsType.
     * Indicator of accounting method used to prepare the cash flow- I = IFRS; G = GAAP
     * @param latestAccountsType Value for String
     */
    @JsonSetter("LatestAccountsType")
    public void setLatestAccountsType(String latestAccountsType) {
        this.latestAccountsType = latestAccountsType;
    }

    /**
     * Getter for RestatedAccounts.
     * Indicator showing whether the cash flow is restated - Y = Restated; N = Not restated
     * @return Returns the String
     */
    @JsonGetter("RestatedAccounts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRestatedAccounts() {
        return restatedAccounts;
    }

    /**
     * Setter for RestatedAccounts.
     * Indicator showing whether the cash flow is restated - Y = Restated; N = Not restated
     * @param restatedAccounts Value for String
     */
    @JsonSetter("RestatedAccounts")
    public void setRestatedAccounts(String restatedAccounts) {
        this.restatedAccounts = restatedAccounts;
    }

    /**
     * Getter for OperatingActivities.
     * Value for UK GAAP Cash Flow - Operating Activities for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OperatingActivities")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOperatingActivities() {
        return operatingActivities;
    }

    /**
     * Setter for OperatingActivities.
     * Value for UK GAAP Cash Flow - Operating Activities for these accounts
     * @param operatingActivities Value for Double
     */
    @JsonSetter("OperatingActivities")
    public void setOperatingActivities(Double operatingActivities) {
        this.operatingActivities = operatingActivities;
    }

    /**
     * Getter for ReturnOnInvestment.
     * Value for UK GAAP Cash Flow - Return On Investment for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ReturnOnInvestment")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getReturnOnInvestment() {
        return returnOnInvestment;
    }

    /**
     * Setter for ReturnOnInvestment.
     * Value for UK GAAP Cash Flow - Return On Investment for these accounts
     * @param returnOnInvestment Value for Double
     */
    @JsonSetter("ReturnOnInvestment")
    public void setReturnOnInvestment(Double returnOnInvestment) {
        this.returnOnInvestment = returnOnInvestment;
    }

    /**
     * Getter for Tax.
     * Value for UK GAAP Cash Flow - Tax for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Tax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTax() {
        return tax;
    }

    /**
     * Setter for Tax.
     * Value for UK GAAP Cash Flow - Tax for these accounts
     * @param tax Value for Double
     */
    @JsonSetter("Tax")
    public void setTax(Double tax) {
        this.tax = tax;
    }

    /**
     * Getter for CapitalExpenditure.
     * Value for UK GAAP Cash Flow - Capital Expenditure for these accounts
     * @return Returns the Double
     */
    @JsonGetter("CapitalExpenditure")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCapitalExpenditure() {
        return capitalExpenditure;
    }

    /**
     * Setter for CapitalExpenditure.
     * Value for UK GAAP Cash Flow - Capital Expenditure for these accounts
     * @param capitalExpenditure Value for Double
     */
    @JsonSetter("CapitalExpenditure")
    public void setCapitalExpenditure(Double capitalExpenditure) {
        this.capitalExpenditure = capitalExpenditure;
    }

    /**
     * Getter for Acquisitions.
     * Value for UK GAAP Cash Flow - Acquisitions for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Acquisitions")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAcquisitions() {
        return acquisitions;
    }

    /**
     * Setter for Acquisitions.
     * Value for UK GAAP Cash Flow - Acquisitions for these accounts
     * @param acquisitions Value for Double
     */
    @JsonSetter("Acquisitions")
    public void setAcquisitions(Double acquisitions) {
        this.acquisitions = acquisitions;
    }

    /**
     * Getter for EquityDivision.
     * Value for UK GAAP Cash Flow - Equity Division for these accounts
     * @return Returns the Double
     */
    @JsonGetter("EquityDivision")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getEquityDivision() {
        return equityDivision;
    }

    /**
     * Setter for EquityDivision.
     * Value for UK GAAP Cash Flow - Equity Division for these accounts
     * @param equityDivision Value for Double
     */
    @JsonSetter("EquityDivision")
    public void setEquityDivision(Double equityDivision) {
        this.equityDivision = equityDivision;
    }

    /**
     * Getter for ManagementLiquidity.
     * Value for UK GAAP Cash Flow - Management Liquidity for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ManagementLiquidity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getManagementLiquidity() {
        return managementLiquidity;
    }

    /**
     * Setter for ManagementLiquidity.
     * Value for UK GAAP Cash Flow - Management Liquidity for these accounts
     * @param managementLiquidity Value for Double
     */
    @JsonSetter("ManagementLiquidity")
    public void setManagementLiquidity(Double managementLiquidity) {
        this.managementLiquidity = managementLiquidity;
    }

    /**
     * Getter for Financing.
     * Value for UK GAAP Cash Flow - Financing for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Financing")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getFinancing() {
        return financing;
    }

    /**
     * Setter for Financing.
     * Value for UK GAAP Cash Flow - Financing for these accounts
     * @param financing Value for Double
     */
    @JsonSetter("Financing")
    public void setFinancing(Double financing) {
        this.financing = financing;
    }

    /**
     * Getter for TotalCash.
     * Value for UK GAAP Cash Flow - Total Cash for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TotalCash")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalCash() {
        return totalCash;
    }

    /**
     * Setter for TotalCash.
     * Value for UK GAAP Cash Flow - Total Cash for these accounts
     * @param totalCash Value for Double
     */
    @JsonSetter("TotalCash")
    public void setTotalCash(Double totalCash) {
        this.totalCash = totalCash;
    }

    /**
     * Getter for IFRSOperatingActivities.
     * Value for IFRS Cash Flow - Operating Activities for these accounts
     * @return Returns the Double
     */
    @JsonGetter("IFRSOperatingActivities")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getIFRSOperatingActivities() {
        return iFRSOperatingActivities;
    }

    /**
     * Setter for IFRSOperatingActivities.
     * Value for IFRS Cash Flow - Operating Activities for these accounts
     * @param iFRSOperatingActivities Value for Double
     */
    @JsonSetter("IFRSOperatingActivities")
    public void setIFRSOperatingActivities(Double iFRSOperatingActivities) {
        this.iFRSOperatingActivities = iFRSOperatingActivities;
    }

    /**
     * Getter for IFRSInvestmentActivities.
     * Value for IFRS Cash Flow - Investment Activities for these accounts
     * @return Returns the Double
     */
    @JsonGetter("IFRSInvestmentActivities")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getIFRSInvestmentActivities() {
        return iFRSInvestmentActivities;
    }

    /**
     * Setter for IFRSInvestmentActivities.
     * Value for IFRS Cash Flow - Investment Activities for these accounts
     * @param iFRSInvestmentActivities Value for Double
     */
    @JsonSetter("IFRSInvestmentActivities")
    public void setIFRSInvestmentActivities(Double iFRSInvestmentActivities) {
        this.iFRSInvestmentActivities = iFRSInvestmentActivities;
    }

    /**
     * Getter for FinancingActs.
     * Value for IFRS Cash Flow - Financing Acts for these accounts
     * @return Returns the Double
     */
    @JsonGetter("FinancingActs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getFinancingActs() {
        return financingActs;
    }

    /**
     * Setter for FinancingActs.
     * Value for IFRS Cash Flow - Financing Acts for these accounts
     * @param financingActs Value for Double
     */
    @JsonSetter("FinancingActs")
    public void setFinancingActs(Double financingActs) {
        this.financingActs = financingActs;
    }

    /**
     * Getter for NetChange.
     * Value for IFRS Cash Flow - Net Change for these accounts
     * @return Returns the Double
     */
    @JsonGetter("NetChange")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getNetChange() {
        return netChange;
    }

    /**
     * Setter for NetChange.
     * Value for IFRS Cash Flow - Net Change for these accounts
     * @param netChange Value for Double
     */
    @JsonSetter("NetChange")
    public void setNetChange(Double netChange) {
        this.netChange = netChange;
    }

    /**
     * Getter for CashBroughtForward.
     * Value for IFRS Cash Flow - Cash Brought Forward for these accounts
     * @return Returns the Double
     */
    @JsonGetter("CashBroughtForward")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCashBroughtForward() {
        return cashBroughtForward;
    }

    /**
     * Setter for CashBroughtForward.
     * Value for IFRS Cash Flow - Cash Brought Forward for these accounts
     * @param cashBroughtForward Value for Double
     */
    @JsonSetter("CashBroughtForward")
    public void setCashBroughtForward(Double cashBroughtForward) {
        this.cashBroughtForward = cashBroughtForward;
    }

    /**
     * Getter for ExchangeRateEffects.
     * Value for IFRS Cash Flow - Exchange Rate Effects for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ExchangeRateEffects")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getExchangeRateEffects() {
        return exchangeRateEffects;
    }

    /**
     * Setter for ExchangeRateEffects.
     * Value for IFRS Cash Flow - Exchange Rate Effects for these accounts
     * @param exchangeRateEffects Value for Double
     */
    @JsonSetter("ExchangeRateEffects")
    public void setExchangeRateEffects(Double exchangeRateEffects) {
        this.exchangeRateEffects = exchangeRateEffects;
    }

    /**
     * Getter for CashEquivalents.
     * Value for IFRS Cash Flow - Cash Equivalents for these accounts
     * @return Returns the Double
     */
    @JsonGetter("CashEquivalents")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCashEquivalents() {
        return cashEquivalents;
    }

    /**
     * Setter for CashEquivalents.
     * Value for IFRS Cash Flow - Cash Equivalents for these accounts
     * @param cashEquivalents Value for Double
     */
    @JsonSetter("CashEquivalents")
    public void setCashEquivalents(Double cashEquivalents) {
        this.cashEquivalents = cashEquivalents;
    }

    /**
     * Converts this Cashflow into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Cashflow [" + "dateOfAccounts=" + dateOfAccounts + ", accountingPeriod="
                + accountingPeriod + ", currency=" + currency + ", currencyMultiplier="
                + currencyMultiplier + ", companyClass=" + companyClass + ", consAccounts="
                + consAccounts + ", dormancyIndicator=" + dormancyIndicator
                + ", latestAccountsType=" + latestAccountsType + ", restatedAccounts="
                + restatedAccounts + ", operatingActivities=" + operatingActivities
                + ", returnOnInvestment=" + returnOnInvestment + ", tax=" + tax
                + ", capitalExpenditure=" + capitalExpenditure + ", acquisitions=" + acquisitions
                + ", equityDivision=" + equityDivision + ", managementLiquidity="
                + managementLiquidity + ", financing=" + financing + ", totalCash=" + totalCash
                + ", iFRSOperatingActivities=" + iFRSOperatingActivities
                + ", iFRSInvestmentActivities=" + iFRSInvestmentActivities + ", financingActs="
                + financingActs + ", netChange=" + netChange + ", cashBroughtForward="
                + cashBroughtForward + ", exchangeRateEffects=" + exchangeRateEffects
                + ", cashEquivalents=" + cashEquivalents + "]";
    }

    /**
     * Builds a new {@link Cashflow.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Cashflow.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .dateOfAccounts(getDateOfAccounts())
                .accountingPeriod(getAccountingPeriod())
                .currency(getCurrency())
                .currencyMultiplier(getCurrencyMultiplier())
                .companyClass(getCompanyClass())
                .consAccounts(getConsAccounts())
                .dormancyIndicator(getDormancyIndicator())
                .latestAccountsType(getLatestAccountsType())
                .restatedAccounts(getRestatedAccounts())
                .operatingActivities(getOperatingActivities())
                .returnOnInvestment(getReturnOnInvestment())
                .tax(getTax())
                .capitalExpenditure(getCapitalExpenditure())
                .acquisitions(getAcquisitions())
                .equityDivision(getEquityDivision())
                .managementLiquidity(getManagementLiquidity())
                .financing(getFinancing())
                .totalCash(getTotalCash())
                .iFRSOperatingActivities(getIFRSOperatingActivities())
                .iFRSInvestmentActivities(getIFRSInvestmentActivities())
                .financingActs(getFinancingActs())
                .netChange(getNetChange())
                .cashBroughtForward(getCashBroughtForward())
                .exchangeRateEffects(getExchangeRateEffects())
                .cashEquivalents(getCashEquivalents());
        return builder;
    }

    /**
     * Class to build instances of {@link Cashflow}.
     */
    public static class Builder {
        private String dateOfAccounts;
        private Integer accountingPeriod;
        private String currency;
        private String currencyMultiplier;
        private String companyClass;
        private String consAccounts;
        private String dormancyIndicator;
        private String latestAccountsType;
        private String restatedAccounts;
        private Double operatingActivities;
        private Double returnOnInvestment;
        private Double tax;
        private Double capitalExpenditure;
        private Double acquisitions;
        private Double equityDivision;
        private Double managementLiquidity;
        private Double financing;
        private Double totalCash;
        private Double iFRSOperatingActivities;
        private Double iFRSInvestmentActivities;
        private Double financingActs;
        private Double netChange;
        private Double cashBroughtForward;
        private Double exchangeRateEffects;
        private Double cashEquivalents;



        /**
         * Setter for dateOfAccounts.
         * @param  dateOfAccounts  String value for dateOfAccounts.
         * @return Builder
         */
        public Builder dateOfAccounts(String dateOfAccounts) {
            this.dateOfAccounts = dateOfAccounts;
            return this;
        }

        /**
         * Setter for accountingPeriod.
         * @param  accountingPeriod  Integer value for accountingPeriod.
         * @return Builder
         */
        public Builder accountingPeriod(Integer accountingPeriod) {
            this.accountingPeriod = accountingPeriod;
            return this;
        }

        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Setter for currencyMultiplier.
         * @param  currencyMultiplier  String value for currencyMultiplier.
         * @return Builder
         */
        public Builder currencyMultiplier(String currencyMultiplier) {
            this.currencyMultiplier = currencyMultiplier;
            return this;
        }

        /**
         * Setter for companyClass.
         * @param  companyClass  String value for companyClass.
         * @return Builder
         */
        public Builder companyClass(String companyClass) {
            this.companyClass = companyClass;
            return this;
        }

        /**
         * Setter for consAccounts.
         * @param  consAccounts  String value for consAccounts.
         * @return Builder
         */
        public Builder consAccounts(String consAccounts) {
            this.consAccounts = consAccounts;
            return this;
        }

        /**
         * Setter for dormancyIndicator.
         * @param  dormancyIndicator  String value for dormancyIndicator.
         * @return Builder
         */
        public Builder dormancyIndicator(String dormancyIndicator) {
            this.dormancyIndicator = dormancyIndicator;
            return this;
        }

        /**
         * Setter for latestAccountsType.
         * @param  latestAccountsType  String value for latestAccountsType.
         * @return Builder
         */
        public Builder latestAccountsType(String latestAccountsType) {
            this.latestAccountsType = latestAccountsType;
            return this;
        }

        /**
         * Setter for restatedAccounts.
         * @param  restatedAccounts  String value for restatedAccounts.
         * @return Builder
         */
        public Builder restatedAccounts(String restatedAccounts) {
            this.restatedAccounts = restatedAccounts;
            return this;
        }

        /**
         * Setter for operatingActivities.
         * @param  operatingActivities  Double value for operatingActivities.
         * @return Builder
         */
        public Builder operatingActivities(Double operatingActivities) {
            this.operatingActivities = operatingActivities;
            return this;
        }

        /**
         * Setter for returnOnInvestment.
         * @param  returnOnInvestment  Double value for returnOnInvestment.
         * @return Builder
         */
        public Builder returnOnInvestment(Double returnOnInvestment) {
            this.returnOnInvestment = returnOnInvestment;
            return this;
        }

        /**
         * Setter for tax.
         * @param  tax  Double value for tax.
         * @return Builder
         */
        public Builder tax(Double tax) {
            this.tax = tax;
            return this;
        }

        /**
         * Setter for capitalExpenditure.
         * @param  capitalExpenditure  Double value for capitalExpenditure.
         * @return Builder
         */
        public Builder capitalExpenditure(Double capitalExpenditure) {
            this.capitalExpenditure = capitalExpenditure;
            return this;
        }

        /**
         * Setter for acquisitions.
         * @param  acquisitions  Double value for acquisitions.
         * @return Builder
         */
        public Builder acquisitions(Double acquisitions) {
            this.acquisitions = acquisitions;
            return this;
        }

        /**
         * Setter for equityDivision.
         * @param  equityDivision  Double value for equityDivision.
         * @return Builder
         */
        public Builder equityDivision(Double equityDivision) {
            this.equityDivision = equityDivision;
            return this;
        }

        /**
         * Setter for managementLiquidity.
         * @param  managementLiquidity  Double value for managementLiquidity.
         * @return Builder
         */
        public Builder managementLiquidity(Double managementLiquidity) {
            this.managementLiquidity = managementLiquidity;
            return this;
        }

        /**
         * Setter for financing.
         * @param  financing  Double value for financing.
         * @return Builder
         */
        public Builder financing(Double financing) {
            this.financing = financing;
            return this;
        }

        /**
         * Setter for totalCash.
         * @param  totalCash  Double value for totalCash.
         * @return Builder
         */
        public Builder totalCash(Double totalCash) {
            this.totalCash = totalCash;
            return this;
        }

        /**
         * Setter for iFRSOperatingActivities.
         * @param  iFRSOperatingActivities  Double value for iFRSOperatingActivities.
         * @return Builder
         */
        public Builder iFRSOperatingActivities(Double iFRSOperatingActivities) {
            this.iFRSOperatingActivities = iFRSOperatingActivities;
            return this;
        }

        /**
         * Setter for iFRSInvestmentActivities.
         * @param  iFRSInvestmentActivities  Double value for iFRSInvestmentActivities.
         * @return Builder
         */
        public Builder iFRSInvestmentActivities(Double iFRSInvestmentActivities) {
            this.iFRSInvestmentActivities = iFRSInvestmentActivities;
            return this;
        }

        /**
         * Setter for financingActs.
         * @param  financingActs  Double value for financingActs.
         * @return Builder
         */
        public Builder financingActs(Double financingActs) {
            this.financingActs = financingActs;
            return this;
        }

        /**
         * Setter for netChange.
         * @param  netChange  Double value for netChange.
         * @return Builder
         */
        public Builder netChange(Double netChange) {
            this.netChange = netChange;
            return this;
        }

        /**
         * Setter for cashBroughtForward.
         * @param  cashBroughtForward  Double value for cashBroughtForward.
         * @return Builder
         */
        public Builder cashBroughtForward(Double cashBroughtForward) {
            this.cashBroughtForward = cashBroughtForward;
            return this;
        }

        /**
         * Setter for exchangeRateEffects.
         * @param  exchangeRateEffects  Double value for exchangeRateEffects.
         * @return Builder
         */
        public Builder exchangeRateEffects(Double exchangeRateEffects) {
            this.exchangeRateEffects = exchangeRateEffects;
            return this;
        }

        /**
         * Setter for cashEquivalents.
         * @param  cashEquivalents  Double value for cashEquivalents.
         * @return Builder
         */
        public Builder cashEquivalents(Double cashEquivalents) {
            this.cashEquivalents = cashEquivalents;
            return this;
        }

        /**
         * Builds a new {@link Cashflow} object using the set fields.
         * @return {@link Cashflow}
         */
        public Cashflow build() {
            return new Cashflow(dateOfAccounts, accountingPeriod, currency, currencyMultiplier,
                    companyClass, consAccounts, dormancyIndicator, latestAccountsType,
                    restatedAccounts, operatingActivities, returnOnInvestment, tax,
                    capitalExpenditure, acquisitions, equityDivision, managementLiquidity,
                    financing, totalCash, iFRSOperatingActivities, iFRSInvestmentActivities,
                    financingActs, netChange, cashBroughtForward, exchangeRateEffects,
                    cashEquivalents);
        }
    }
}
