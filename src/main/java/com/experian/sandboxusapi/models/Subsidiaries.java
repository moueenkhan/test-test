/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for Subsidiaries type.
 */
public class Subsidiaries {
    private String treePosition;
    private Double totalElements;
    private Double totalSubs;
    private Double totalNumImmediateSubs;
    private Double totalNumLiveImmediateSubs;
    private Double totalNumDormantImmediateSubs;
    private Double totalNumDissolvedLiquidatedImmediateSubs;
    private Double totalNumNestedSubs;
    private Double totalNumSubs;
    private Double totalNumUKSubs;
    private Double totalNumOverseasSubs;
    private List<UKSubsidiaries> uKSubsidiaries;
    private List<ForgnSubsidiaries> foreignSubsidiaries;

    /**
     * Default constructor.
     */
    public Subsidiaries() {
    }

    /**
     * Initialization constructor.
     * @param  treePosition  String value for treePosition.
     * @param  totalElements  Double value for totalElements.
     * @param  totalSubs  Double value for totalSubs.
     * @param  totalNumImmediateSubs  Double value for totalNumImmediateSubs.
     * @param  totalNumLiveImmediateSubs  Double value for totalNumLiveImmediateSubs.
     * @param  totalNumDormantImmediateSubs  Double value for totalNumDormantImmediateSubs.
     * @param  totalNumDissolvedLiquidatedImmediateSubs  Double value for
     *         totalNumDissolvedLiquidatedImmediateSubs.
     * @param  totalNumNestedSubs  Double value for totalNumNestedSubs.
     * @param  totalNumSubs  Double value for totalNumSubs.
     * @param  totalNumUKSubs  Double value for totalNumUKSubs.
     * @param  totalNumOverseasSubs  Double value for totalNumOverseasSubs.
     * @param  uKSubsidiaries  List of UKSubsidiaries value for uKSubsidiaries.
     * @param  foreignSubsidiaries  List of ForgnSubsidiaries value for foreignSubsidiaries.
     */
    public Subsidiaries(
            String treePosition,
            Double totalElements,
            Double totalSubs,
            Double totalNumImmediateSubs,
            Double totalNumLiveImmediateSubs,
            Double totalNumDormantImmediateSubs,
            Double totalNumDissolvedLiquidatedImmediateSubs,
            Double totalNumNestedSubs,
            Double totalNumSubs,
            Double totalNumUKSubs,
            Double totalNumOverseasSubs,
            List<UKSubsidiaries> uKSubsidiaries,
            List<ForgnSubsidiaries> foreignSubsidiaries) {
        this.treePosition = treePosition;
        this.totalElements = totalElements;
        this.totalSubs = totalSubs;
        this.totalNumImmediateSubs = totalNumImmediateSubs;
        this.totalNumLiveImmediateSubs = totalNumLiveImmediateSubs;
        this.totalNumDormantImmediateSubs = totalNumDormantImmediateSubs;
        this.totalNumDissolvedLiquidatedImmediateSubs = totalNumDissolvedLiquidatedImmediateSubs;
        this.totalNumNestedSubs = totalNumNestedSubs;
        this.totalNumSubs = totalNumSubs;
        this.totalNumUKSubs = totalNumUKSubs;
        this.totalNumOverseasSubs = totalNumOverseasSubs;
        this.uKSubsidiaries = uKSubsidiaries;
        this.foreignSubsidiaries = foreignSubsidiaries;
    }

    /**
     * Getter for TreePosition.
     * Position of the limited company in the corporate tree - 1 = Independent company; 2 =
     * Subsidiary; 3 = Parent; 4 = Intermediate parent; 5 = Top of tree
     * @return Returns the String
     */
    @JsonGetter("TreePosition")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTreePosition() {
        return treePosition;
    }

    /**
     * Setter for TreePosition.
     * Position of the limited company in the corporate tree - 1 = Independent company; 2 =
     * Subsidiary; 3 = Parent; 4 = Intermediate parent; 5 = Top of tree
     * @param treePosition Value for String
     */
    @JsonSetter("TreePosition")
    public void setTreePosition(String treePosition) {
        this.treePosition = treePosition;
    }

    /**
     * Getter for TotalElements.
     * Total number of elements in the corporate tree
     * @return Returns the Double
     */
    @JsonGetter("TotalElements")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalElements() {
        return totalElements;
    }

    /**
     * Setter for TotalElements.
     * Total number of elements in the corporate tree
     * @param totalElements Value for Double
     */
    @JsonSetter("TotalElements")
    public void setTotalElements(Double totalElements) {
        this.totalElements = totalElements;
    }

    /**
     * Getter for TotalSubs.
     * Number of subsidiaries in the corporate tree below the ultimate parent
     * @return Returns the Double
     */
    @JsonGetter("TotalSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalSubs() {
        return totalSubs;
    }

    /**
     * Setter for TotalSubs.
     * Number of subsidiaries in the corporate tree below the ultimate parent
     * @param totalSubs Value for Double
     */
    @JsonSetter("TotalSubs")
    public void setTotalSubs(Double totalSubs) {
        this.totalSubs = totalSubs;
    }

    /**
     * Getter for TotalNumImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company
     * @return Returns the Double
     */
    @JsonGetter("TotalNumImmediateSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumImmediateSubs() {
        return totalNumImmediateSubs;
    }

    /**
     * Setter for TotalNumImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company
     * @param totalNumImmediateSubs Value for Double
     */
    @JsonSetter("TotalNumImmediateSubs")
    public void setTotalNumImmediateSubs(Double totalNumImmediateSubs) {
        this.totalNumImmediateSubs = totalNumImmediateSubs;
    }

    /**
     * Getter for TotalNumLiveImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are live
     * @return Returns the Double
     */
    @JsonGetter("TotalNumLiveImmediateSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumLiveImmediateSubs() {
        return totalNumLiveImmediateSubs;
    }

    /**
     * Setter for TotalNumLiveImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are live
     * @param totalNumLiveImmediateSubs Value for Double
     */
    @JsonSetter("TotalNumLiveImmediateSubs")
    public void setTotalNumLiveImmediateSubs(Double totalNumLiveImmediateSubs) {
        this.totalNumLiveImmediateSubs = totalNumLiveImmediateSubs;
    }

    /**
     * Getter for TotalNumDormantImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are dormant
     * @return Returns the Double
     */
    @JsonGetter("TotalNumDormantImmediateSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumDormantImmediateSubs() {
        return totalNumDormantImmediateSubs;
    }

    /**
     * Setter for TotalNumDormantImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are dormant
     * @param totalNumDormantImmediateSubs Value for Double
     */
    @JsonSetter("TotalNumDormantImmediateSubs")
    public void setTotalNumDormantImmediateSubs(Double totalNumDormantImmediateSubs) {
        this.totalNumDormantImmediateSubs = totalNumDormantImmediateSubs;
    }

    /**
     * Getter for TotalNumDissolvedLiquidatedImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are dissolved or
     * liquidated
     * @return Returns the Double
     */
    @JsonGetter("TotalNumDissolvedLiquidatedImmediateSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumDissolvedLiquidatedImmediateSubs() {
        return totalNumDissolvedLiquidatedImmediateSubs;
    }

    /**
     * Setter for TotalNumDissolvedLiquidatedImmediateSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are dissolved or
     * liquidated
     * @param totalNumDissolvedLiquidatedImmediateSubs Value for Double
     */
    @JsonSetter("TotalNumDissolvedLiquidatedImmediateSubs")
    public void setTotalNumDissolvedLiquidatedImmediateSubs(Double totalNumDissolvedLiquidatedImmediateSubs) {
        this.totalNumDissolvedLiquidatedImmediateSubs = totalNumDissolvedLiquidatedImmediateSubs;
    }

    /**
     * Getter for TotalNumNestedSubs.
     * Number of nested subsidiaries in the corporate tree
     * @return Returns the Double
     */
    @JsonGetter("TotalNumNestedSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumNestedSubs() {
        return totalNumNestedSubs;
    }

    /**
     * Setter for TotalNumNestedSubs.
     * Number of nested subsidiaries in the corporate tree
     * @param totalNumNestedSubs Value for Double
     */
    @JsonSetter("TotalNumNestedSubs")
    public void setTotalNumNestedSubs(Double totalNumNestedSubs) {
        this.totalNumNestedSubs = totalNumNestedSubs;
    }

    /**
     * Getter for TotalNumSubs.
     * Number of subsidiaries in the corporate tree below the limited company
     * @return Returns the Double
     */
    @JsonGetter("TotalNumSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumSubs() {
        return totalNumSubs;
    }

    /**
     * Setter for TotalNumSubs.
     * Number of subsidiaries in the corporate tree below the limited company
     * @param totalNumSubs Value for Double
     */
    @JsonSetter("TotalNumSubs")
    public void setTotalNumSubs(Double totalNumSubs) {
        this.totalNumSubs = totalNumSubs;
    }

    /**
     * Getter for TotalNumUKSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are UK based
     * @return Returns the Double
     */
    @JsonGetter("TotalNumUKSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumUKSubs() {
        return totalNumUKSubs;
    }

    /**
     * Setter for TotalNumUKSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are UK based
     * @param totalNumUKSubs Value for Double
     */
    @JsonSetter("TotalNumUKSubs")
    public void setTotalNumUKSubs(Double totalNumUKSubs) {
        this.totalNumUKSubs = totalNumUKSubs;
    }

    /**
     * Getter for TotalNumOverseasSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are foreign
     * @return Returns the Double
     */
    @JsonGetter("TotalNumOverseasSubs")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNumOverseasSubs() {
        return totalNumOverseasSubs;
    }

    /**
     * Setter for TotalNumOverseasSubs.
     * Number of subsidiaries in the corporate tree below the limited company that are foreign
     * @param totalNumOverseasSubs Value for Double
     */
    @JsonSetter("TotalNumOverseasSubs")
    public void setTotalNumOverseasSubs(Double totalNumOverseasSubs) {
        this.totalNumOverseasSubs = totalNumOverseasSubs;
    }

    /**
     * Getter for UKSubsidiaries.
     * @return Returns the List of UKSubsidiaries
     */
    @JsonGetter("UKSubsidiaries")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<UKSubsidiaries> getUKSubsidiaries() {
        return uKSubsidiaries;
    }

    /**
     * Setter for UKSubsidiaries.
     * @param uKSubsidiaries Value for List of UKSubsidiaries
     */
    @JsonSetter("UKSubsidiaries")
    public void setUKSubsidiaries(List<UKSubsidiaries> uKSubsidiaries) {
        this.uKSubsidiaries = uKSubsidiaries;
    }

    /**
     * Getter for ForeignSubsidiaries.
     * @return Returns the List of ForgnSubsidiaries
     */
    @JsonGetter("ForeignSubsidiaries")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ForgnSubsidiaries> getForeignSubsidiaries() {
        return foreignSubsidiaries;
    }

    /**
     * Setter for ForeignSubsidiaries.
     * @param foreignSubsidiaries Value for List of ForgnSubsidiaries
     */
    @JsonSetter("ForeignSubsidiaries")
    public void setForeignSubsidiaries(List<ForgnSubsidiaries> foreignSubsidiaries) {
        this.foreignSubsidiaries = foreignSubsidiaries;
    }

    /**
     * Converts this Subsidiaries into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Subsidiaries [" + "treePosition=" + treePosition + ", totalElements="
                + totalElements + ", totalSubs=" + totalSubs + ", totalNumImmediateSubs="
                + totalNumImmediateSubs + ", totalNumLiveImmediateSubs=" + totalNumLiveImmediateSubs
                + ", totalNumDormantImmediateSubs=" + totalNumDormantImmediateSubs
                + ", totalNumDissolvedLiquidatedImmediateSubs="
                + totalNumDissolvedLiquidatedImmediateSubs + ", totalNumNestedSubs="
                + totalNumNestedSubs + ", totalNumSubs=" + totalNumSubs + ", totalNumUKSubs="
                + totalNumUKSubs + ", totalNumOverseasSubs=" + totalNumOverseasSubs
                + ", uKSubsidiaries=" + uKSubsidiaries + ", foreignSubsidiaries="
                + foreignSubsidiaries + "]";
    }

    /**
     * Builds a new {@link Subsidiaries.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Subsidiaries.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .treePosition(getTreePosition())
                .totalElements(getTotalElements())
                .totalSubs(getTotalSubs())
                .totalNumImmediateSubs(getTotalNumImmediateSubs())
                .totalNumLiveImmediateSubs(getTotalNumLiveImmediateSubs())
                .totalNumDormantImmediateSubs(getTotalNumDormantImmediateSubs())
                .totalNumDissolvedLiquidatedImmediateSubs(getTotalNumDissolvedLiquidatedImmediateSubs())
                .totalNumNestedSubs(getTotalNumNestedSubs())
                .totalNumSubs(getTotalNumSubs())
                .totalNumUKSubs(getTotalNumUKSubs())
                .totalNumOverseasSubs(getTotalNumOverseasSubs())
                .uKSubsidiaries(getUKSubsidiaries())
                .foreignSubsidiaries(getForeignSubsidiaries());
        return builder;
    }

    /**
     * Class to build instances of {@link Subsidiaries}.
     */
    public static class Builder {
        private String treePosition;
        private Double totalElements;
        private Double totalSubs;
        private Double totalNumImmediateSubs;
        private Double totalNumLiveImmediateSubs;
        private Double totalNumDormantImmediateSubs;
        private Double totalNumDissolvedLiquidatedImmediateSubs;
        private Double totalNumNestedSubs;
        private Double totalNumSubs;
        private Double totalNumUKSubs;
        private Double totalNumOverseasSubs;
        private List<UKSubsidiaries> uKSubsidiaries;
        private List<ForgnSubsidiaries> foreignSubsidiaries;



        /**
         * Setter for treePosition.
         * @param  treePosition  String value for treePosition.
         * @return Builder
         */
        public Builder treePosition(String treePosition) {
            this.treePosition = treePosition;
            return this;
        }

        /**
         * Setter for totalElements.
         * @param  totalElements  Double value for totalElements.
         * @return Builder
         */
        public Builder totalElements(Double totalElements) {
            this.totalElements = totalElements;
            return this;
        }

        /**
         * Setter for totalSubs.
         * @param  totalSubs  Double value for totalSubs.
         * @return Builder
         */
        public Builder totalSubs(Double totalSubs) {
            this.totalSubs = totalSubs;
            return this;
        }

        /**
         * Setter for totalNumImmediateSubs.
         * @param  totalNumImmediateSubs  Double value for totalNumImmediateSubs.
         * @return Builder
         */
        public Builder totalNumImmediateSubs(Double totalNumImmediateSubs) {
            this.totalNumImmediateSubs = totalNumImmediateSubs;
            return this;
        }

        /**
         * Setter for totalNumLiveImmediateSubs.
         * @param  totalNumLiveImmediateSubs  Double value for totalNumLiveImmediateSubs.
         * @return Builder
         */
        public Builder totalNumLiveImmediateSubs(Double totalNumLiveImmediateSubs) {
            this.totalNumLiveImmediateSubs = totalNumLiveImmediateSubs;
            return this;
        }

        /**
         * Setter for totalNumDormantImmediateSubs.
         * @param  totalNumDormantImmediateSubs  Double value for totalNumDormantImmediateSubs.
         * @return Builder
         */
        public Builder totalNumDormantImmediateSubs(Double totalNumDormantImmediateSubs) {
            this.totalNumDormantImmediateSubs = totalNumDormantImmediateSubs;
            return this;
        }

        /**
         * Setter for totalNumDissolvedLiquidatedImmediateSubs.
         * @param  totalNumDissolvedLiquidatedImmediateSubs  Double value for
         *         totalNumDissolvedLiquidatedImmediateSubs.
         * @return Builder
         */
        public Builder totalNumDissolvedLiquidatedImmediateSubs(
                Double totalNumDissolvedLiquidatedImmediateSubs) {
            this.totalNumDissolvedLiquidatedImmediateSubs =
                    totalNumDissolvedLiquidatedImmediateSubs;
            return this;
        }

        /**
         * Setter for totalNumNestedSubs.
         * @param  totalNumNestedSubs  Double value for totalNumNestedSubs.
         * @return Builder
         */
        public Builder totalNumNestedSubs(Double totalNumNestedSubs) {
            this.totalNumNestedSubs = totalNumNestedSubs;
            return this;
        }

        /**
         * Setter for totalNumSubs.
         * @param  totalNumSubs  Double value for totalNumSubs.
         * @return Builder
         */
        public Builder totalNumSubs(Double totalNumSubs) {
            this.totalNumSubs = totalNumSubs;
            return this;
        }

        /**
         * Setter for totalNumUKSubs.
         * @param  totalNumUKSubs  Double value for totalNumUKSubs.
         * @return Builder
         */
        public Builder totalNumUKSubs(Double totalNumUKSubs) {
            this.totalNumUKSubs = totalNumUKSubs;
            return this;
        }

        /**
         * Setter for totalNumOverseasSubs.
         * @param  totalNumOverseasSubs  Double value for totalNumOverseasSubs.
         * @return Builder
         */
        public Builder totalNumOverseasSubs(Double totalNumOverseasSubs) {
            this.totalNumOverseasSubs = totalNumOverseasSubs;
            return this;
        }

        /**
         * Setter for uKSubsidiaries.
         * @param  uKSubsidiaries  List of UKSubsidiaries value for uKSubsidiaries.
         * @return Builder
         */
        public Builder uKSubsidiaries(List<UKSubsidiaries> uKSubsidiaries) {
            this.uKSubsidiaries = uKSubsidiaries;
            return this;
        }

        /**
         * Setter for foreignSubsidiaries.
         * @param  foreignSubsidiaries  List of ForgnSubsidiaries value for foreignSubsidiaries.
         * @return Builder
         */
        public Builder foreignSubsidiaries(List<ForgnSubsidiaries> foreignSubsidiaries) {
            this.foreignSubsidiaries = foreignSubsidiaries;
            return this;
        }

        /**
         * Builds a new {@link Subsidiaries} object using the set fields.
         * @return {@link Subsidiaries}
         */
        public Subsidiaries build() {
            return new Subsidiaries(treePosition, totalElements, totalSubs, totalNumImmediateSubs,
                    totalNumLiveImmediateSubs, totalNumDormantImmediateSubs,
                    totalNumDissolvedLiquidatedImmediateSubs, totalNumNestedSubs, totalNumSubs,
                    totalNumUKSubs, totalNumOverseasSubs, uKSubsidiaries, foreignSubsidiaries);
        }
    }
}
