/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for TangibleAssetsDetails type.
 */
public class TangibleAssetsDetails {
    private Double tangibleAssets;
    private Double landBuildings;
    private Double freehold;
    private Double leasehold;
    private Double fixturesFittings;
    private Double plantVehicles;
    private Double plant;
    private Double vehicles;
    private Double assetsInCourseConstruction;
    private Double otherTangibleAssets;

    /**
     * Default constructor.
     */
    public TangibleAssetsDetails() {
    }

    /**
     * Initialization constructor.
     * @param  tangibleAssets  Double value for tangibleAssets.
     * @param  landBuildings  Double value for landBuildings.
     * @param  freehold  Double value for freehold.
     * @param  leasehold  Double value for leasehold.
     * @param  fixturesFittings  Double value for fixturesFittings.
     * @param  plantVehicles  Double value for plantVehicles.
     * @param  plant  Double value for plant.
     * @param  vehicles  Double value for vehicles.
     * @param  assetsInCourseConstruction  Double value for assetsInCourseConstruction.
     * @param  otherTangibleAssets  Double value for otherTangibleAssets.
     */
    public TangibleAssetsDetails(
            Double tangibleAssets,
            Double landBuildings,
            Double freehold,
            Double leasehold,
            Double fixturesFittings,
            Double plantVehicles,
            Double plant,
            Double vehicles,
            Double assetsInCourseConstruction,
            Double otherTangibleAssets) {
        this.tangibleAssets = tangibleAssets;
        this.landBuildings = landBuildings;
        this.freehold = freehold;
        this.leasehold = leasehold;
        this.fixturesFittings = fixturesFittings;
        this.plantVehicles = plantVehicles;
        this.plant = plant;
        this.vehicles = vehicles;
        this.assetsInCourseConstruction = assetsInCourseConstruction;
        this.otherTangibleAssets = otherTangibleAssets;
    }

    /**
     * Getter for TangibleAssets.
     * Value for Balance Sheet - Tangible Assets for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TangibleAssets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTangibleAssets() {
        return tangibleAssets;
    }

    /**
     * Setter for TangibleAssets.
     * Value for Balance Sheet - Tangible Assets for these accounts
     * @param tangibleAssets Value for Double
     */
    @JsonSetter("TangibleAssets")
    public void setTangibleAssets(Double tangibleAssets) {
        this.tangibleAssets = tangibleAssets;
    }

    /**
     * Getter for LandBuildings.
     * Value for Balance Sheet - Tangible Assets - Land & Buildings for these accounts
     * @return Returns the Double
     */
    @JsonGetter("LandBuildings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLandBuildings() {
        return landBuildings;
    }

    /**
     * Setter for LandBuildings.
     * Value for Balance Sheet - Tangible Assets - Land & Buildings for these accounts
     * @param landBuildings Value for Double
     */
    @JsonSetter("LandBuildings")
    public void setLandBuildings(Double landBuildings) {
        this.landBuildings = landBuildings;
    }

    /**
     * Getter for Freehold.
     * Value for Balance Sheet - Tangible Assets - Freehold Land & Buildings for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Freehold")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getFreehold() {
        return freehold;
    }

    /**
     * Setter for Freehold.
     * Value for Balance Sheet - Tangible Assets - Freehold Land & Buildings for these accounts
     * @param freehold Value for Double
     */
    @JsonSetter("Freehold")
    public void setFreehold(Double freehold) {
        this.freehold = freehold;
    }

    /**
     * Getter for Leasehold.
     * Value for Balance Sheet - Tangible Assets - Leasehold Land & Buildings for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Leasehold")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLeasehold() {
        return leasehold;
    }

    /**
     * Setter for Leasehold.
     * Value for Balance Sheet - Tangible Assets - Leasehold Land & Buildings for these accounts
     * @param leasehold Value for Double
     */
    @JsonSetter("Leasehold")
    public void setLeasehold(Double leasehold) {
        this.leasehold = leasehold;
    }

    /**
     * Getter for FixturesFittings.
     * Value for Balance Sheet - Tangible Assets - Fixtures and Fittings for these accounts
     * @return Returns the Double
     */
    @JsonGetter("FixturesFittings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getFixturesFittings() {
        return fixturesFittings;
    }

    /**
     * Setter for FixturesFittings.
     * Value for Balance Sheet - Tangible Assets - Fixtures and Fittings for these accounts
     * @param fixturesFittings Value for Double
     */
    @JsonSetter("FixturesFittings")
    public void setFixturesFittings(Double fixturesFittings) {
        this.fixturesFittings = fixturesFittings;
    }

    /**
     * Getter for PlantVehicles.
     * Value for Balance Sheet - Tangible Assets - Plant & Vehicles for these accounts
     * @return Returns the Double
     */
    @JsonGetter("PlantVehicles")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getPlantVehicles() {
        return plantVehicles;
    }

    /**
     * Setter for PlantVehicles.
     * Value for Balance Sheet - Tangible Assets - Plant & Vehicles for these accounts
     * @param plantVehicles Value for Double
     */
    @JsonSetter("PlantVehicles")
    public void setPlantVehicles(Double plantVehicles) {
        this.plantVehicles = plantVehicles;
    }

    /**
     * Getter for Plant.
     * Value for Balance Sheet - Tangible Assets - Plant for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Plant")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getPlant() {
        return plant;
    }

    /**
     * Setter for Plant.
     * Value for Balance Sheet - Tangible Assets - Plant for these accounts
     * @param plant Value for Double
     */
    @JsonSetter("Plant")
    public void setPlant(Double plant) {
        this.plant = plant;
    }

    /**
     * Getter for Vehicles.
     * Value for Balance Sheet - Tangible Assets - Vehicles for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Vehicles")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getVehicles() {
        return vehicles;
    }

    /**
     * Setter for Vehicles.
     * Value for Balance Sheet - Tangible Assets - Vehicles for these accounts
     * @param vehicles Value for Double
     */
    @JsonSetter("Vehicles")
    public void setVehicles(Double vehicles) {
        this.vehicles = vehicles;
    }

    /**
     * Getter for AssetsInCourseConstruction.
     * Value for Balance Sheet - Tangible Assets - Assets in course of construction
     * @return Returns the Double
     */
    @JsonGetter("AssetsInCourseConstruction")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAssetsInCourseConstruction() {
        return assetsInCourseConstruction;
    }

    /**
     * Setter for AssetsInCourseConstruction.
     * Value for Balance Sheet - Tangible Assets - Assets in course of construction
     * @param assetsInCourseConstruction Value for Double
     */
    @JsonSetter("AssetsInCourseConstruction")
    public void setAssetsInCourseConstruction(Double assetsInCourseConstruction) {
        this.assetsInCourseConstruction = assetsInCourseConstruction;
    }

    /**
     * Getter for OtherTangibleAssets.
     * Value for Balance Sheet - Tangible Assets - Other for these accounts
     * @return Returns the Double
     */
    @JsonGetter("OtherTangibleAssets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOtherTangibleAssets() {
        return otherTangibleAssets;
    }

    /**
     * Setter for OtherTangibleAssets.
     * Value for Balance Sheet - Tangible Assets - Other for these accounts
     * @param otherTangibleAssets Value for Double
     */
    @JsonSetter("OtherTangibleAssets")
    public void setOtherTangibleAssets(Double otherTangibleAssets) {
        this.otherTangibleAssets = otherTangibleAssets;
    }

    /**
     * Converts this TangibleAssetsDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TangibleAssetsDetails [" + "tangibleAssets=" + tangibleAssets + ", landBuildings="
                + landBuildings + ", freehold=" + freehold + ", leasehold=" + leasehold
                + ", fixturesFittings=" + fixturesFittings + ", plantVehicles=" + plantVehicles
                + ", plant=" + plant + ", vehicles=" + vehicles + ", assetsInCourseConstruction="
                + assetsInCourseConstruction + ", otherTangibleAssets=" + otherTangibleAssets + "]";
    }

    /**
     * Builds a new {@link TangibleAssetsDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TangibleAssetsDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .tangibleAssets(getTangibleAssets())
                .landBuildings(getLandBuildings())
                .freehold(getFreehold())
                .leasehold(getLeasehold())
                .fixturesFittings(getFixturesFittings())
                .plantVehicles(getPlantVehicles())
                .plant(getPlant())
                .vehicles(getVehicles())
                .assetsInCourseConstruction(getAssetsInCourseConstruction())
                .otherTangibleAssets(getOtherTangibleAssets());
        return builder;
    }

    /**
     * Class to build instances of {@link TangibleAssetsDetails}.
     */
    public static class Builder {
        private Double tangibleAssets;
        private Double landBuildings;
        private Double freehold;
        private Double leasehold;
        private Double fixturesFittings;
        private Double plantVehicles;
        private Double plant;
        private Double vehicles;
        private Double assetsInCourseConstruction;
        private Double otherTangibleAssets;



        /**
         * Setter for tangibleAssets.
         * @param  tangibleAssets  Double value for tangibleAssets.
         * @return Builder
         */
        public Builder tangibleAssets(Double tangibleAssets) {
            this.tangibleAssets = tangibleAssets;
            return this;
        }

        /**
         * Setter for landBuildings.
         * @param  landBuildings  Double value for landBuildings.
         * @return Builder
         */
        public Builder landBuildings(Double landBuildings) {
            this.landBuildings = landBuildings;
            return this;
        }

        /**
         * Setter for freehold.
         * @param  freehold  Double value for freehold.
         * @return Builder
         */
        public Builder freehold(Double freehold) {
            this.freehold = freehold;
            return this;
        }

        /**
         * Setter for leasehold.
         * @param  leasehold  Double value for leasehold.
         * @return Builder
         */
        public Builder leasehold(Double leasehold) {
            this.leasehold = leasehold;
            return this;
        }

        /**
         * Setter for fixturesFittings.
         * @param  fixturesFittings  Double value for fixturesFittings.
         * @return Builder
         */
        public Builder fixturesFittings(Double fixturesFittings) {
            this.fixturesFittings = fixturesFittings;
            return this;
        }

        /**
         * Setter for plantVehicles.
         * @param  plantVehicles  Double value for plantVehicles.
         * @return Builder
         */
        public Builder plantVehicles(Double plantVehicles) {
            this.plantVehicles = plantVehicles;
            return this;
        }

        /**
         * Setter for plant.
         * @param  plant  Double value for plant.
         * @return Builder
         */
        public Builder plant(Double plant) {
            this.plant = plant;
            return this;
        }

        /**
         * Setter for vehicles.
         * @param  vehicles  Double value for vehicles.
         * @return Builder
         */
        public Builder vehicles(Double vehicles) {
            this.vehicles = vehicles;
            return this;
        }

        /**
         * Setter for assetsInCourseConstruction.
         * @param  assetsInCourseConstruction  Double value for assetsInCourseConstruction.
         * @return Builder
         */
        public Builder assetsInCourseConstruction(Double assetsInCourseConstruction) {
            this.assetsInCourseConstruction = assetsInCourseConstruction;
            return this;
        }

        /**
         * Setter for otherTangibleAssets.
         * @param  otherTangibleAssets  Double value for otherTangibleAssets.
         * @return Builder
         */
        public Builder otherTangibleAssets(Double otherTangibleAssets) {
            this.otherTangibleAssets = otherTangibleAssets;
            return this;
        }

        /**
         * Builds a new {@link TangibleAssetsDetails} object using the set fields.
         * @return {@link TangibleAssetsDetails}
         */
        public TangibleAssetsDetails build() {
            return new TangibleAssetsDetails(tangibleAssets, landBuildings, freehold, leasehold,
                    fixturesFittings, plantVehicles, plant, vehicles, assetsInCourseConstruction,
                    otherTangibleAssets);
        }
    }
}
