/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for Auditor type.
 */
public class Auditor {
    private String currency;
    private String remuneration;
    private String nonAuditFee;
    private String auditType;
    private String auditQual;
    private String auditors;

    /**
     * Default constructor.
     */
    public Auditor() {
    }

    /**
     * Initialization constructor.
     * @param  currency  String value for currency.
     * @param  remuneration  String value for remuneration.
     * @param  nonAuditFee  String value for nonAuditFee.
     * @param  auditType  String value for auditType.
     * @param  auditQual  String value for auditQual.
     * @param  auditors  String value for auditors.
     */
    public Auditor(
            String currency,
            String remuneration,
            String nonAuditFee,
            String auditType,
            String auditQual,
            String auditors) {
        this.currency = currency;
        this.remuneration = remuneration;
        this.nonAuditFee = nonAuditFee;
        this.auditType = auditType;
        this.auditQual = auditQual;
        this.auditors = auditors;
    }

    /**
     * Getter for Currency.
     * ISO currency code
     * @return Returns the String
     */
    @JsonGetter("Currency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCurrency() {
        return currency;
    }

    /**
     * Setter for Currency.
     * ISO currency code
     * @param currency Value for String
     */
    @JsonSetter("Currency")
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * Getter for Remuneration.
     * Value for Auditors Remuneration
     * @return Returns the String
     */
    @JsonGetter("Remuneration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRemuneration() {
        return remuneration;
    }

    /**
     * Setter for Remuneration.
     * Value for Auditors Remuneration
     * @param remuneration Value for String
     */
    @JsonSetter("Remuneration")
    public void setRemuneration(String remuneration) {
        this.remuneration = remuneration;
    }

    /**
     * Getter for NonAuditFee.
     * Value for Fee for non-audit work
     * @return Returns the String
     */
    @JsonGetter("NonAuditFee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getNonAuditFee() {
        return nonAuditFee;
    }

    /**
     * Setter for NonAuditFee.
     * Value for Fee for non-audit work
     * @param nonAuditFee Value for String
     */
    @JsonSetter("NonAuditFee")
    public void setNonAuditFee(String nonAuditFee) {
        this.nonAuditFee = nonAuditFee;
    }

    /**
     * Getter for AuditType.
     * Indicator showing the audit type - A = Auditors (No exemptions); C = Chartered accountant; D
     * = Director
     * @return Returns the String
     */
    @JsonGetter("AuditType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAuditType() {
        return auditType;
    }

    /**
     * Setter for AuditType.
     * Indicator showing the audit type - A = Auditors (No exemptions); C = Chartered accountant; D
     * = Director
     * @param auditType Value for String
     */
    @JsonSetter("AuditType")
    public void setAuditType(String auditType) {
        this.auditType = auditType;
    }

    /**
     * Getter for AuditQual.
     * Indicator showing any audit qualification - 0 = No qualification; 1 = Minor qualification; 2
     * = Major qualification (Risk index suppressed); 3 = Major qualification (Risk index not
     * suppressed)
     * @return Returns the String
     */
    @JsonGetter("AuditQual")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAuditQual() {
        return auditQual;
    }

    /**
     * Setter for AuditQual.
     * Indicator showing any audit qualification - 0 = No qualification; 1 = Minor qualification; 2
     * = Major qualification (Risk index suppressed); 3 = Major qualification (Risk index not
     * suppressed)
     * @param auditQual Value for String
     */
    @JsonSetter("AuditQual")
    public void setAuditQual(String auditQual) {
        this.auditQual = auditQual;
    }

    /**
     * Getter for Auditors.
     * Name of Auditors
     * @return Returns the String
     */
    @JsonGetter("Auditors")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAuditors() {
        return auditors;
    }

    /**
     * Setter for Auditors.
     * Name of Auditors
     * @param auditors Value for String
     */
    @JsonSetter("Auditors")
    public void setAuditors(String auditors) {
        this.auditors = auditors;
    }

    /**
     * Converts this Auditor into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Auditor [" + "currency=" + currency + ", remuneration=" + remuneration
                + ", nonAuditFee=" + nonAuditFee + ", auditType=" + auditType + ", auditQual="
                + auditQual + ", auditors=" + auditors + "]";
    }

    /**
     * Builds a new {@link Auditor.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Auditor.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .currency(getCurrency())
                .remuneration(getRemuneration())
                .nonAuditFee(getNonAuditFee())
                .auditType(getAuditType())
                .auditQual(getAuditQual())
                .auditors(getAuditors());
        return builder;
    }

    /**
     * Class to build instances of {@link Auditor}.
     */
    public static class Builder {
        private String currency;
        private String remuneration;
        private String nonAuditFee;
        private String auditType;
        private String auditQual;
        private String auditors;



        /**
         * Setter for currency.
         * @param  currency  String value for currency.
         * @return Builder
         */
        public Builder currency(String currency) {
            this.currency = currency;
            return this;
        }

        /**
         * Setter for remuneration.
         * @param  remuneration  String value for remuneration.
         * @return Builder
         */
        public Builder remuneration(String remuneration) {
            this.remuneration = remuneration;
            return this;
        }

        /**
         * Setter for nonAuditFee.
         * @param  nonAuditFee  String value for nonAuditFee.
         * @return Builder
         */
        public Builder nonAuditFee(String nonAuditFee) {
            this.nonAuditFee = nonAuditFee;
            return this;
        }

        /**
         * Setter for auditType.
         * @param  auditType  String value for auditType.
         * @return Builder
         */
        public Builder auditType(String auditType) {
            this.auditType = auditType;
            return this;
        }

        /**
         * Setter for auditQual.
         * @param  auditQual  String value for auditQual.
         * @return Builder
         */
        public Builder auditQual(String auditQual) {
            this.auditQual = auditQual;
            return this;
        }

        /**
         * Setter for auditors.
         * @param  auditors  String value for auditors.
         * @return Builder
         */
        public Builder auditors(String auditors) {
            this.auditors = auditors;
            return this;
        }

        /**
         * Builds a new {@link Auditor} object using the set fields.
         * @return {@link Auditor}
         */
        public Auditor build() {
            return new Auditor(currency, remuneration, nonAuditFee, auditType, auditQual, auditors);
        }
    }
}
