/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for BalanceSheet type.
 */
public class BalanceSheet {
    private TangibleAssetsDetails tangibleAssetsDetails;
    private Double intangibleAssets;
    private InvestmentAssetsDetails investmentAssetsDetails;
    private FinancialAssetsNonCurrentDetails financialAssetsNonCurrentDetails;
    private OtherNonCurrentAssetsDetails otherNonCurrentAssetsDetails;
    private Double totalFixedNonCurrentAssets;
    private InventoriesDetails inventoriesDetails;
    private DebtorsDetails debtorsDetails;
    private TotalCashDetails totalCashDetails;
    private FinancialAssetsCurrentDetails financialAssetsCurrentDetails;
    private OtherCurrentAssetsDetails otherCurrentAssetsDetails;
    private Double totalCurrentAssets;
    private CreditorsDetails creditorsDetails;
    private FinancialLiabilitiesDetails financialLiabilitiesDetails;
    private OtherCurrentLiabilitiesDetails otherCurrentLiabilitiesDetails;
    private Double totalCurrentLiabilities;
    private Double workingCapital;
    private Double capitalEmployed;
    private LongTermFinancialLiabilitiesDetails longTermFinancialLiabilitiesDetails;
    private OtherNonCurrentLiabilitiesDetails otherNonCurrentLiabilitiesDetails;
    private Double totalNonCurrentLiabilities;
    private ProvisionsDetails provisionsDetails;
    private Double minorityInterestsUKGAAP;
    private Double netAssets;
    private IssuedCapitalDetails issuedCapitalDetails;
    private Double sharePremium;
    private Double interestInOwnShares;
    private Double retainedEarnings;
    private Double revaluationReserve;
    private Double currencyTranslationReserve;
    private Double other;
    private Double totalShareholdersFunds;
    private Double minorityInterestsIFRS;
    private Double netWorth;

    /**
     * Default constructor.
     */
    public BalanceSheet() {
    }

    /**
     * Initialization constructor.
     * @param  tangibleAssetsDetails  TangibleAssetsDetails value for tangibleAssetsDetails.
     * @param  intangibleAssets  Double value for intangibleAssets.
     * @param  investmentAssetsDetails  InvestmentAssetsDetails value for investmentAssetsDetails.
     * @param  financialAssetsNonCurrentDetails  FinancialAssetsNonCurrentDetails value for
     *         financialAssetsNonCurrentDetails.
     * @param  otherNonCurrentAssetsDetails  OtherNonCurrentAssetsDetails value for
     *         otherNonCurrentAssetsDetails.
     * @param  totalFixedNonCurrentAssets  Double value for totalFixedNonCurrentAssets.
     * @param  inventoriesDetails  InventoriesDetails value for inventoriesDetails.
     * @param  debtorsDetails  DebtorsDetails value for debtorsDetails.
     * @param  totalCashDetails  TotalCashDetails value for totalCashDetails.
     * @param  financialAssetsCurrentDetails  FinancialAssetsCurrentDetails value for
     *         financialAssetsCurrentDetails.
     * @param  otherCurrentAssetsDetails  OtherCurrentAssetsDetails value for
     *         otherCurrentAssetsDetails.
     * @param  totalCurrentAssets  Double value for totalCurrentAssets.
     * @param  creditorsDetails  CreditorsDetails value for creditorsDetails.
     * @param  financialLiabilitiesDetails  FinancialLiabilitiesDetails value for
     *         financialLiabilitiesDetails.
     * @param  otherCurrentLiabilitiesDetails  OtherCurrentLiabilitiesDetails value for
     *         otherCurrentLiabilitiesDetails.
     * @param  totalCurrentLiabilities  Double value for totalCurrentLiabilities.
     * @param  workingCapital  Double value for workingCapital.
     * @param  capitalEmployed  Double value for capitalEmployed.
     * @param  longTermFinancialLiabilitiesDetails  LongTermFinancialLiabilitiesDetails value for
     *         longTermFinancialLiabilitiesDetails.
     * @param  otherNonCurrentLiabilitiesDetails  OtherNonCurrentLiabilitiesDetails value for
     *         otherNonCurrentLiabilitiesDetails.
     * @param  totalNonCurrentLiabilities  Double value for totalNonCurrentLiabilities.
     * @param  provisionsDetails  ProvisionsDetails value for provisionsDetails.
     * @param  minorityInterestsUKGAAP  Double value for minorityInterestsUKGAAP.
     * @param  netAssets  Double value for netAssets.
     * @param  issuedCapitalDetails  IssuedCapitalDetails value for issuedCapitalDetails.
     * @param  sharePremium  Double value for sharePremium.
     * @param  interestInOwnShares  Double value for interestInOwnShares.
     * @param  retainedEarnings  Double value for retainedEarnings.
     * @param  revaluationReserve  Double value for revaluationReserve.
     * @param  currencyTranslationReserve  Double value for currencyTranslationReserve.
     * @param  other  Double value for other.
     * @param  totalShareholdersFunds  Double value for totalShareholdersFunds.
     * @param  minorityInterestsIFRS  Double value for minorityInterestsIFRS.
     * @param  netWorth  Double value for netWorth.
     */
    public BalanceSheet(
            TangibleAssetsDetails tangibleAssetsDetails,
            Double intangibleAssets,
            InvestmentAssetsDetails investmentAssetsDetails,
            FinancialAssetsNonCurrentDetails financialAssetsNonCurrentDetails,
            OtherNonCurrentAssetsDetails otherNonCurrentAssetsDetails,
            Double totalFixedNonCurrentAssets,
            InventoriesDetails inventoriesDetails,
            DebtorsDetails debtorsDetails,
            TotalCashDetails totalCashDetails,
            FinancialAssetsCurrentDetails financialAssetsCurrentDetails,
            OtherCurrentAssetsDetails otherCurrentAssetsDetails,
            Double totalCurrentAssets,
            CreditorsDetails creditorsDetails,
            FinancialLiabilitiesDetails financialLiabilitiesDetails,
            OtherCurrentLiabilitiesDetails otherCurrentLiabilitiesDetails,
            Double totalCurrentLiabilities,
            Double workingCapital,
            Double capitalEmployed,
            LongTermFinancialLiabilitiesDetails longTermFinancialLiabilitiesDetails,
            OtherNonCurrentLiabilitiesDetails otherNonCurrentLiabilitiesDetails,
            Double totalNonCurrentLiabilities,
            ProvisionsDetails provisionsDetails,
            Double minorityInterestsUKGAAP,
            Double netAssets,
            IssuedCapitalDetails issuedCapitalDetails,
            Double sharePremium,
            Double interestInOwnShares,
            Double retainedEarnings,
            Double revaluationReserve,
            Double currencyTranslationReserve,
            Double other,
            Double totalShareholdersFunds,
            Double minorityInterestsIFRS,
            Double netWorth) {
        this.tangibleAssetsDetails = tangibleAssetsDetails;
        this.intangibleAssets = intangibleAssets;
        this.investmentAssetsDetails = investmentAssetsDetails;
        this.financialAssetsNonCurrentDetails = financialAssetsNonCurrentDetails;
        this.otherNonCurrentAssetsDetails = otherNonCurrentAssetsDetails;
        this.totalFixedNonCurrentAssets = totalFixedNonCurrentAssets;
        this.inventoriesDetails = inventoriesDetails;
        this.debtorsDetails = debtorsDetails;
        this.totalCashDetails = totalCashDetails;
        this.financialAssetsCurrentDetails = financialAssetsCurrentDetails;
        this.otherCurrentAssetsDetails = otherCurrentAssetsDetails;
        this.totalCurrentAssets = totalCurrentAssets;
        this.creditorsDetails = creditorsDetails;
        this.financialLiabilitiesDetails = financialLiabilitiesDetails;
        this.otherCurrentLiabilitiesDetails = otherCurrentLiabilitiesDetails;
        this.totalCurrentLiabilities = totalCurrentLiabilities;
        this.workingCapital = workingCapital;
        this.capitalEmployed = capitalEmployed;
        this.longTermFinancialLiabilitiesDetails = longTermFinancialLiabilitiesDetails;
        this.otherNonCurrentLiabilitiesDetails = otherNonCurrentLiabilitiesDetails;
        this.totalNonCurrentLiabilities = totalNonCurrentLiabilities;
        this.provisionsDetails = provisionsDetails;
        this.minorityInterestsUKGAAP = minorityInterestsUKGAAP;
        this.netAssets = netAssets;
        this.issuedCapitalDetails = issuedCapitalDetails;
        this.sharePremium = sharePremium;
        this.interestInOwnShares = interestInOwnShares;
        this.retainedEarnings = retainedEarnings;
        this.revaluationReserve = revaluationReserve;
        this.currencyTranslationReserve = currencyTranslationReserve;
        this.other = other;
        this.totalShareholdersFunds = totalShareholdersFunds;
        this.minorityInterestsIFRS = minorityInterestsIFRS;
        this.netWorth = netWorth;
    }

    /**
     * Getter for TangibleAssetsDetails.
     * @return Returns the TangibleAssetsDetails
     */
    @JsonGetter("TangibleAssetsDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TangibleAssetsDetails getTangibleAssetsDetails() {
        return tangibleAssetsDetails;
    }

    /**
     * Setter for TangibleAssetsDetails.
     * @param tangibleAssetsDetails Value for TangibleAssetsDetails
     */
    @JsonSetter("TangibleAssetsDetails")
    public void setTangibleAssetsDetails(TangibleAssetsDetails tangibleAssetsDetails) {
        this.tangibleAssetsDetails = tangibleAssetsDetails;
    }

    /**
     * Getter for IntangibleAssets.
     * Value for Balance Sheet - Intangible Assets for these accounts
     * @return Returns the Double
     */
    @JsonGetter("IntangibleAssets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getIntangibleAssets() {
        return intangibleAssets;
    }

    /**
     * Setter for IntangibleAssets.
     * Value for Balance Sheet - Intangible Assets for these accounts
     * @param intangibleAssets Value for Double
     */
    @JsonSetter("IntangibleAssets")
    public void setIntangibleAssets(Double intangibleAssets) {
        this.intangibleAssets = intangibleAssets;
    }

    /**
     * Getter for InvestmentAssetsDetails.
     * @return Returns the InvestmentAssetsDetails
     */
    @JsonGetter("InvestmentAssetsDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InvestmentAssetsDetails getInvestmentAssetsDetails() {
        return investmentAssetsDetails;
    }

    /**
     * Setter for InvestmentAssetsDetails.
     * @param investmentAssetsDetails Value for InvestmentAssetsDetails
     */
    @JsonSetter("InvestmentAssetsDetails")
    public void setInvestmentAssetsDetails(InvestmentAssetsDetails investmentAssetsDetails) {
        this.investmentAssetsDetails = investmentAssetsDetails;
    }

    /**
     * Getter for FinancialAssetsNonCurrentDetails.
     * @return Returns the FinancialAssetsNonCurrentDetails
     */
    @JsonGetter("FinancialAssetsNonCurrentDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FinancialAssetsNonCurrentDetails getFinancialAssetsNonCurrentDetails() {
        return financialAssetsNonCurrentDetails;
    }

    /**
     * Setter for FinancialAssetsNonCurrentDetails.
     * @param financialAssetsNonCurrentDetails Value for FinancialAssetsNonCurrentDetails
     */
    @JsonSetter("FinancialAssetsNonCurrentDetails")
    public void setFinancialAssetsNonCurrentDetails(FinancialAssetsNonCurrentDetails financialAssetsNonCurrentDetails) {
        this.financialAssetsNonCurrentDetails = financialAssetsNonCurrentDetails;
    }

    /**
     * Getter for OtherNonCurrentAssetsDetails.
     * @return Returns the OtherNonCurrentAssetsDetails
     */
    @JsonGetter("OtherNonCurrentAssetsDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OtherNonCurrentAssetsDetails getOtherNonCurrentAssetsDetails() {
        return otherNonCurrentAssetsDetails;
    }

    /**
     * Setter for OtherNonCurrentAssetsDetails.
     * @param otherNonCurrentAssetsDetails Value for OtherNonCurrentAssetsDetails
     */
    @JsonSetter("OtherNonCurrentAssetsDetails")
    public void setOtherNonCurrentAssetsDetails(OtherNonCurrentAssetsDetails otherNonCurrentAssetsDetails) {
        this.otherNonCurrentAssetsDetails = otherNonCurrentAssetsDetails;
    }

    /**
     * Getter for TotalFixedNonCurrentAssets.
     * Value for Balance Sheet - Total Fixed Non Current Assets for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TotalFixedNonCurrentAssets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalFixedNonCurrentAssets() {
        return totalFixedNonCurrentAssets;
    }

    /**
     * Setter for TotalFixedNonCurrentAssets.
     * Value for Balance Sheet - Total Fixed Non Current Assets for these accounts
     * @param totalFixedNonCurrentAssets Value for Double
     */
    @JsonSetter("TotalFixedNonCurrentAssets")
    public void setTotalFixedNonCurrentAssets(Double totalFixedNonCurrentAssets) {
        this.totalFixedNonCurrentAssets = totalFixedNonCurrentAssets;
    }

    /**
     * Getter for InventoriesDetails.
     * @return Returns the InventoriesDetails
     */
    @JsonGetter("InventoriesDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InventoriesDetails getInventoriesDetails() {
        return inventoriesDetails;
    }

    /**
     * Setter for InventoriesDetails.
     * @param inventoriesDetails Value for InventoriesDetails
     */
    @JsonSetter("InventoriesDetails")
    public void setInventoriesDetails(InventoriesDetails inventoriesDetails) {
        this.inventoriesDetails = inventoriesDetails;
    }

    /**
     * Getter for DebtorsDetails.
     * @return Returns the DebtorsDetails
     */
    @JsonGetter("DebtorsDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DebtorsDetails getDebtorsDetails() {
        return debtorsDetails;
    }

    /**
     * Setter for DebtorsDetails.
     * @param debtorsDetails Value for DebtorsDetails
     */
    @JsonSetter("DebtorsDetails")
    public void setDebtorsDetails(DebtorsDetails debtorsDetails) {
        this.debtorsDetails = debtorsDetails;
    }

    /**
     * Getter for TotalCashDetails.
     * @return Returns the TotalCashDetails
     */
    @JsonGetter("TotalCashDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TotalCashDetails getTotalCashDetails() {
        return totalCashDetails;
    }

    /**
     * Setter for TotalCashDetails.
     * @param totalCashDetails Value for TotalCashDetails
     */
    @JsonSetter("TotalCashDetails")
    public void setTotalCashDetails(TotalCashDetails totalCashDetails) {
        this.totalCashDetails = totalCashDetails;
    }

    /**
     * Getter for FinancialAssetsCurrentDetails.
     * @return Returns the FinancialAssetsCurrentDetails
     */
    @JsonGetter("FinancialAssetsCurrentDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FinancialAssetsCurrentDetails getFinancialAssetsCurrentDetails() {
        return financialAssetsCurrentDetails;
    }

    /**
     * Setter for FinancialAssetsCurrentDetails.
     * @param financialAssetsCurrentDetails Value for FinancialAssetsCurrentDetails
     */
    @JsonSetter("FinancialAssetsCurrentDetails")
    public void setFinancialAssetsCurrentDetails(FinancialAssetsCurrentDetails financialAssetsCurrentDetails) {
        this.financialAssetsCurrentDetails = financialAssetsCurrentDetails;
    }

    /**
     * Getter for OtherCurrentAssetsDetails.
     * @return Returns the OtherCurrentAssetsDetails
     */
    @JsonGetter("OtherCurrentAssetsDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OtherCurrentAssetsDetails getOtherCurrentAssetsDetails() {
        return otherCurrentAssetsDetails;
    }

    /**
     * Setter for OtherCurrentAssetsDetails.
     * @param otherCurrentAssetsDetails Value for OtherCurrentAssetsDetails
     */
    @JsonSetter("OtherCurrentAssetsDetails")
    public void setOtherCurrentAssetsDetails(OtherCurrentAssetsDetails otherCurrentAssetsDetails) {
        this.otherCurrentAssetsDetails = otherCurrentAssetsDetails;
    }

    /**
     * Getter for TotalCurrentAssets.
     * Value for Balance Sheet - Total Current Assets for these account
     * @return Returns the Double
     */
    @JsonGetter("TotalCurrentAssets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalCurrentAssets() {
        return totalCurrentAssets;
    }

    /**
     * Setter for TotalCurrentAssets.
     * Value for Balance Sheet - Total Current Assets for these account
     * @param totalCurrentAssets Value for Double
     */
    @JsonSetter("TotalCurrentAssets")
    public void setTotalCurrentAssets(Double totalCurrentAssets) {
        this.totalCurrentAssets = totalCurrentAssets;
    }

    /**
     * Getter for CreditorsDetails.
     * @return Returns the CreditorsDetails
     */
    @JsonGetter("CreditorsDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CreditorsDetails getCreditorsDetails() {
        return creditorsDetails;
    }

    /**
     * Setter for CreditorsDetails.
     * @param creditorsDetails Value for CreditorsDetails
     */
    @JsonSetter("CreditorsDetails")
    public void setCreditorsDetails(CreditorsDetails creditorsDetails) {
        this.creditorsDetails = creditorsDetails;
    }

    /**
     * Getter for FinancialLiabilitiesDetails.
     * @return Returns the FinancialLiabilitiesDetails
     */
    @JsonGetter("FinancialLiabilitiesDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FinancialLiabilitiesDetails getFinancialLiabilitiesDetails() {
        return financialLiabilitiesDetails;
    }

    /**
     * Setter for FinancialLiabilitiesDetails.
     * @param financialLiabilitiesDetails Value for FinancialLiabilitiesDetails
     */
    @JsonSetter("FinancialLiabilitiesDetails")
    public void setFinancialLiabilitiesDetails(FinancialLiabilitiesDetails financialLiabilitiesDetails) {
        this.financialLiabilitiesDetails = financialLiabilitiesDetails;
    }

    /**
     * Getter for OtherCurrentLiabilitiesDetails.
     * @return Returns the OtherCurrentLiabilitiesDetails
     */
    @JsonGetter("OtherCurrentLiabilitiesDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OtherCurrentLiabilitiesDetails getOtherCurrentLiabilitiesDetails() {
        return otherCurrentLiabilitiesDetails;
    }

    /**
     * Setter for OtherCurrentLiabilitiesDetails.
     * @param otherCurrentLiabilitiesDetails Value for OtherCurrentLiabilitiesDetails
     */
    @JsonSetter("OtherCurrentLiabilitiesDetails")
    public void setOtherCurrentLiabilitiesDetails(OtherCurrentLiabilitiesDetails otherCurrentLiabilitiesDetails) {
        this.otherCurrentLiabilitiesDetails = otherCurrentLiabilitiesDetails;
    }

    /**
     * Getter for TotalCurrentLiabilities.
     * Value for Balance Sheet - Total Current Liabilities for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TotalCurrentLiabilities")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalCurrentLiabilities() {
        return totalCurrentLiabilities;
    }

    /**
     * Setter for TotalCurrentLiabilities.
     * Value for Balance Sheet - Total Current Liabilities for these accounts
     * @param totalCurrentLiabilities Value for Double
     */
    @JsonSetter("TotalCurrentLiabilities")
    public void setTotalCurrentLiabilities(Double totalCurrentLiabilities) {
        this.totalCurrentLiabilities = totalCurrentLiabilities;
    }

    /**
     * Getter for WorkingCapital.
     * Value for Balance Sheet - Working Capital for these accounts
     * @return Returns the Double
     */
    @JsonGetter("WorkingCapital")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getWorkingCapital() {
        return workingCapital;
    }

    /**
     * Setter for WorkingCapital.
     * Value for Balance Sheet - Working Capital for these accounts
     * @param workingCapital Value for Double
     */
    @JsonSetter("WorkingCapital")
    public void setWorkingCapital(Double workingCapital) {
        this.workingCapital = workingCapital;
    }

    /**
     * Getter for CapitalEmployed.
     * Value for Balance Sheet - Capital Employed for these accounts
     * @return Returns the Double
     */
    @JsonGetter("CapitalEmployed")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCapitalEmployed() {
        return capitalEmployed;
    }

    /**
     * Setter for CapitalEmployed.
     * Value for Balance Sheet - Capital Employed for these accounts
     * @param capitalEmployed Value for Double
     */
    @JsonSetter("CapitalEmployed")
    public void setCapitalEmployed(Double capitalEmployed) {
        this.capitalEmployed = capitalEmployed;
    }

    /**
     * Getter for LongTermFinancialLiabilitiesDetails.
     * @return Returns the LongTermFinancialLiabilitiesDetails
     */
    @JsonGetter("LongTermFinancialLiabilitiesDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public LongTermFinancialLiabilitiesDetails getLongTermFinancialLiabilitiesDetails() {
        return longTermFinancialLiabilitiesDetails;
    }

    /**
     * Setter for LongTermFinancialLiabilitiesDetails.
     * @param longTermFinancialLiabilitiesDetails Value for LongTermFinancialLiabilitiesDetails
     */
    @JsonSetter("LongTermFinancialLiabilitiesDetails")
    public void setLongTermFinancialLiabilitiesDetails(LongTermFinancialLiabilitiesDetails longTermFinancialLiabilitiesDetails) {
        this.longTermFinancialLiabilitiesDetails = longTermFinancialLiabilitiesDetails;
    }

    /**
     * Getter for OtherNonCurrentLiabilitiesDetails.
     * @return Returns the OtherNonCurrentLiabilitiesDetails
     */
    @JsonGetter("OtherNonCurrentLiabilitiesDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public OtherNonCurrentLiabilitiesDetails getOtherNonCurrentLiabilitiesDetails() {
        return otherNonCurrentLiabilitiesDetails;
    }

    /**
     * Setter for OtherNonCurrentLiabilitiesDetails.
     * @param otherNonCurrentLiabilitiesDetails Value for OtherNonCurrentLiabilitiesDetails
     */
    @JsonSetter("OtherNonCurrentLiabilitiesDetails")
    public void setOtherNonCurrentLiabilitiesDetails(OtherNonCurrentLiabilitiesDetails otherNonCurrentLiabilitiesDetails) {
        this.otherNonCurrentLiabilitiesDetails = otherNonCurrentLiabilitiesDetails;
    }

    /**
     * Getter for TotalNonCurrentLiabilities.
     * Value for Balance Sheet - Total Non-current Liabilities for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TotalNonCurrentLiabilities")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalNonCurrentLiabilities() {
        return totalNonCurrentLiabilities;
    }

    /**
     * Setter for TotalNonCurrentLiabilities.
     * Value for Balance Sheet - Total Non-current Liabilities for these accounts
     * @param totalNonCurrentLiabilities Value for Double
     */
    @JsonSetter("TotalNonCurrentLiabilities")
    public void setTotalNonCurrentLiabilities(Double totalNonCurrentLiabilities) {
        this.totalNonCurrentLiabilities = totalNonCurrentLiabilities;
    }

    /**
     * Getter for ProvisionsDetails.
     * @return Returns the ProvisionsDetails
     */
    @JsonGetter("ProvisionsDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProvisionsDetails getProvisionsDetails() {
        return provisionsDetails;
    }

    /**
     * Setter for ProvisionsDetails.
     * @param provisionsDetails Value for ProvisionsDetails
     */
    @JsonSetter("ProvisionsDetails")
    public void setProvisionsDetails(ProvisionsDetails provisionsDetails) {
        this.provisionsDetails = provisionsDetails;
    }

    /**
     * Getter for MinorityInterestsUKGAAP.
     * Value for Balance Sheet - Minority Interests for these accounts (applicable to UK GAAP only)
     * @return Returns the Double
     */
    @JsonGetter("MinorityInterestsUKGAAP")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getMinorityInterestsUKGAAP() {
        return minorityInterestsUKGAAP;
    }

    /**
     * Setter for MinorityInterestsUKGAAP.
     * Value for Balance Sheet - Minority Interests for these accounts (applicable to UK GAAP only)
     * @param minorityInterestsUKGAAP Value for Double
     */
    @JsonSetter("MinorityInterestsUKGAAP")
    public void setMinorityInterestsUKGAAP(Double minorityInterestsUKGAAP) {
        this.minorityInterestsUKGAAP = minorityInterestsUKGAAP;
    }

    /**
     * Getter for NetAssets.
     * Value for Balance Sheet - Net Assets for these accounts
     * @return Returns the Double
     */
    @JsonGetter("NetAssets")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getNetAssets() {
        return netAssets;
    }

    /**
     * Setter for NetAssets.
     * Value for Balance Sheet - Net Assets for these accounts
     * @param netAssets Value for Double
     */
    @JsonSetter("NetAssets")
    public void setNetAssets(Double netAssets) {
        this.netAssets = netAssets;
    }

    /**
     * Getter for IssuedCapitalDetails.
     * @return Returns the IssuedCapitalDetails
     */
    @JsonGetter("IssuedCapitalDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public IssuedCapitalDetails getIssuedCapitalDetails() {
        return issuedCapitalDetails;
    }

    /**
     * Setter for IssuedCapitalDetails.
     * @param issuedCapitalDetails Value for IssuedCapitalDetails
     */
    @JsonSetter("IssuedCapitalDetails")
    public void setIssuedCapitalDetails(IssuedCapitalDetails issuedCapitalDetails) {
        this.issuedCapitalDetails = issuedCapitalDetails;
    }

    /**
     * Getter for SharePremium.
     * Value for Balance Sheet - Share Premium for these accounts
     * @return Returns the Double
     */
    @JsonGetter("SharePremium")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSharePremium() {
        return sharePremium;
    }

    /**
     * Setter for SharePremium.
     * Value for Balance Sheet - Share Premium for these accounts
     * @param sharePremium Value for Double
     */
    @JsonSetter("SharePremium")
    public void setSharePremium(Double sharePremium) {
        this.sharePremium = sharePremium;
    }

    /**
     * Getter for InterestInOwnShares.
     * Value for Balance Sheet - Interest In Own Shares for these accounts
     * @return Returns the Double
     */
    @JsonGetter("InterestInOwnShares")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getInterestInOwnShares() {
        return interestInOwnShares;
    }

    /**
     * Setter for InterestInOwnShares.
     * Value for Balance Sheet - Interest In Own Shares for these accounts
     * @param interestInOwnShares Value for Double
     */
    @JsonSetter("InterestInOwnShares")
    public void setInterestInOwnShares(Double interestInOwnShares) {
        this.interestInOwnShares = interestInOwnShares;
    }

    /**
     * Getter for RetainedEarnings.
     * Value for Balance Sheet - Retained Earnings for these accounts
     * @return Returns the Double
     */
    @JsonGetter("RetainedEarnings")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getRetainedEarnings() {
        return retainedEarnings;
    }

    /**
     * Setter for RetainedEarnings.
     * Value for Balance Sheet - Retained Earnings for these accounts
     * @param retainedEarnings Value for Double
     */
    @JsonSetter("RetainedEarnings")
    public void setRetainedEarnings(Double retainedEarnings) {
        this.retainedEarnings = retainedEarnings;
    }

    /**
     * Getter for RevaluationReserve.
     * Value for Balance Sheet - Revaluation Reserve for these accounts
     * @return Returns the Double
     */
    @JsonGetter("RevaluationReserve")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getRevaluationReserve() {
        return revaluationReserve;
    }

    /**
     * Setter for RevaluationReserve.
     * Value for Balance Sheet - Revaluation Reserve for these accounts
     * @param revaluationReserve Value for Double
     */
    @JsonSetter("RevaluationReserve")
    public void setRevaluationReserve(Double revaluationReserve) {
        this.revaluationReserve = revaluationReserve;
    }

    /**
     * Getter for CurrencyTranslationReserve.
     * Value for Balance Sheet - Currency Translation Reserve for these accounts
     * @return Returns the Double
     */
    @JsonGetter("CurrencyTranslationReserve")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCurrencyTranslationReserve() {
        return currencyTranslationReserve;
    }

    /**
     * Setter for CurrencyTranslationReserve.
     * Value for Balance Sheet - Currency Translation Reserve for these accounts
     * @param currencyTranslationReserve Value for Double
     */
    @JsonSetter("CurrencyTranslationReserve")
    public void setCurrencyTranslationReserve(Double currencyTranslationReserve) {
        this.currencyTranslationReserve = currencyTranslationReserve;
    }

    /**
     * Getter for Other.
     * Value for Balance Sheet - Other for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Other")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOther() {
        return other;
    }

    /**
     * Setter for Other.
     * Value for Balance Sheet - Other for these accounts
     * @param other Value for Double
     */
    @JsonSetter("Other")
    public void setOther(Double other) {
        this.other = other;
    }

    /**
     * Getter for TotalShareholdersFunds.
     * Value for Balance Sheet - Total Shareholders' Funds (Total Equity) for these accounts
     * @return Returns the Double
     */
    @JsonGetter("TotalShareholdersFunds")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getTotalShareholdersFunds() {
        return totalShareholdersFunds;
    }

    /**
     * Setter for TotalShareholdersFunds.
     * Value for Balance Sheet - Total Shareholders' Funds (Total Equity) for these accounts
     * @param totalShareholdersFunds Value for Double
     */
    @JsonSetter("TotalShareholdersFunds")
    public void setTotalShareholdersFunds(Double totalShareholdersFunds) {
        this.totalShareholdersFunds = totalShareholdersFunds;
    }

    /**
     * Getter for MinorityInterestsIFRS.
     * Value for Balance Sheet - Minority Interests for these accounts (applicable to IFRS only)
     * @return Returns the Double
     */
    @JsonGetter("MinorityInterestsIFRS")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getMinorityInterestsIFRS() {
        return minorityInterestsIFRS;
    }

    /**
     * Setter for MinorityInterestsIFRS.
     * Value for Balance Sheet - Minority Interests for these accounts (applicable to IFRS only)
     * @param minorityInterestsIFRS Value for Double
     */
    @JsonSetter("MinorityInterestsIFRS")
    public void setMinorityInterestsIFRS(Double minorityInterestsIFRS) {
        this.minorityInterestsIFRS = minorityInterestsIFRS;
    }

    /**
     * Getter for NetWorth.
     * Value for Balance Sheet - Net Worth for these accounts
     * @return Returns the Double
     */
    @JsonGetter("NetWorth")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getNetWorth() {
        return netWorth;
    }

    /**
     * Setter for NetWorth.
     * Value for Balance Sheet - Net Worth for these accounts
     * @param netWorth Value for Double
     */
    @JsonSetter("NetWorth")
    public void setNetWorth(Double netWorth) {
        this.netWorth = netWorth;
    }

    /**
     * Converts this BalanceSheet into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "BalanceSheet [" + "tangibleAssetsDetails=" + tangibleAssetsDetails
                + ", intangibleAssets=" + intangibleAssets + ", investmentAssetsDetails="
                + investmentAssetsDetails + ", financialAssetsNonCurrentDetails="
                + financialAssetsNonCurrentDetails + ", otherNonCurrentAssetsDetails="
                + otherNonCurrentAssetsDetails + ", totalFixedNonCurrentAssets="
                + totalFixedNonCurrentAssets + ", inventoriesDetails=" + inventoriesDetails
                + ", debtorsDetails=" + debtorsDetails + ", totalCashDetails=" + totalCashDetails
                + ", financialAssetsCurrentDetails=" + financialAssetsCurrentDetails
                + ", otherCurrentAssetsDetails=" + otherCurrentAssetsDetails
                + ", totalCurrentAssets=" + totalCurrentAssets + ", creditorsDetails="
                + creditorsDetails + ", financialLiabilitiesDetails=" + financialLiabilitiesDetails
                + ", otherCurrentLiabilitiesDetails=" + otherCurrentLiabilitiesDetails
                + ", totalCurrentLiabilities=" + totalCurrentLiabilities + ", workingCapital="
                + workingCapital + ", capitalEmployed=" + capitalEmployed
                + ", longTermFinancialLiabilitiesDetails=" + longTermFinancialLiabilitiesDetails
                + ", otherNonCurrentLiabilitiesDetails=" + otherNonCurrentLiabilitiesDetails
                + ", totalNonCurrentLiabilities=" + totalNonCurrentLiabilities
                + ", provisionsDetails=" + provisionsDetails + ", minorityInterestsUKGAAP="
                + minorityInterestsUKGAAP + ", netAssets=" + netAssets + ", issuedCapitalDetails="
                + issuedCapitalDetails + ", sharePremium=" + sharePremium + ", interestInOwnShares="
                + interestInOwnShares + ", retainedEarnings=" + retainedEarnings
                + ", revaluationReserve=" + revaluationReserve + ", currencyTranslationReserve="
                + currencyTranslationReserve + ", other=" + other + ", totalShareholdersFunds="
                + totalShareholdersFunds + ", minorityInterestsIFRS=" + minorityInterestsIFRS
                + ", netWorth=" + netWorth + "]";
    }

    /**
     * Builds a new {@link BalanceSheet.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link BalanceSheet.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .tangibleAssetsDetails(getTangibleAssetsDetails())
                .intangibleAssets(getIntangibleAssets())
                .investmentAssetsDetails(getInvestmentAssetsDetails())
                .financialAssetsNonCurrentDetails(getFinancialAssetsNonCurrentDetails())
                .otherNonCurrentAssetsDetails(getOtherNonCurrentAssetsDetails())
                .totalFixedNonCurrentAssets(getTotalFixedNonCurrentAssets())
                .inventoriesDetails(getInventoriesDetails())
                .debtorsDetails(getDebtorsDetails())
                .totalCashDetails(getTotalCashDetails())
                .financialAssetsCurrentDetails(getFinancialAssetsCurrentDetails())
                .otherCurrentAssetsDetails(getOtherCurrentAssetsDetails())
                .totalCurrentAssets(getTotalCurrentAssets())
                .creditorsDetails(getCreditorsDetails())
                .financialLiabilitiesDetails(getFinancialLiabilitiesDetails())
                .otherCurrentLiabilitiesDetails(getOtherCurrentLiabilitiesDetails())
                .totalCurrentLiabilities(getTotalCurrentLiabilities())
                .workingCapital(getWorkingCapital())
                .capitalEmployed(getCapitalEmployed())
                .longTermFinancialLiabilitiesDetails(getLongTermFinancialLiabilitiesDetails())
                .otherNonCurrentLiabilitiesDetails(getOtherNonCurrentLiabilitiesDetails())
                .totalNonCurrentLiabilities(getTotalNonCurrentLiabilities())
                .provisionsDetails(getProvisionsDetails())
                .minorityInterestsUKGAAP(getMinorityInterestsUKGAAP())
                .netAssets(getNetAssets())
                .issuedCapitalDetails(getIssuedCapitalDetails())
                .sharePremium(getSharePremium())
                .interestInOwnShares(getInterestInOwnShares())
                .retainedEarnings(getRetainedEarnings())
                .revaluationReserve(getRevaluationReserve())
                .currencyTranslationReserve(getCurrencyTranslationReserve())
                .other(getOther())
                .totalShareholdersFunds(getTotalShareholdersFunds())
                .minorityInterestsIFRS(getMinorityInterestsIFRS())
                .netWorth(getNetWorth());
        return builder;
    }

    /**
     * Class to build instances of {@link BalanceSheet}.
     */
    public static class Builder {
        private TangibleAssetsDetails tangibleAssetsDetails;
        private Double intangibleAssets;
        private InvestmentAssetsDetails investmentAssetsDetails;
        private FinancialAssetsNonCurrentDetails financialAssetsNonCurrentDetails;
        private OtherNonCurrentAssetsDetails otherNonCurrentAssetsDetails;
        private Double totalFixedNonCurrentAssets;
        private InventoriesDetails inventoriesDetails;
        private DebtorsDetails debtorsDetails;
        private TotalCashDetails totalCashDetails;
        private FinancialAssetsCurrentDetails financialAssetsCurrentDetails;
        private OtherCurrentAssetsDetails otherCurrentAssetsDetails;
        private Double totalCurrentAssets;
        private CreditorsDetails creditorsDetails;
        private FinancialLiabilitiesDetails financialLiabilitiesDetails;
        private OtherCurrentLiabilitiesDetails otherCurrentLiabilitiesDetails;
        private Double totalCurrentLiabilities;
        private Double workingCapital;
        private Double capitalEmployed;
        private LongTermFinancialLiabilitiesDetails longTermFinancialLiabilitiesDetails;
        private OtherNonCurrentLiabilitiesDetails otherNonCurrentLiabilitiesDetails;
        private Double totalNonCurrentLiabilities;
        private ProvisionsDetails provisionsDetails;
        private Double minorityInterestsUKGAAP;
        private Double netAssets;
        private IssuedCapitalDetails issuedCapitalDetails;
        private Double sharePremium;
        private Double interestInOwnShares;
        private Double retainedEarnings;
        private Double revaluationReserve;
        private Double currencyTranslationReserve;
        private Double other;
        private Double totalShareholdersFunds;
        private Double minorityInterestsIFRS;
        private Double netWorth;



        /**
         * Setter for tangibleAssetsDetails.
         * @param  tangibleAssetsDetails  TangibleAssetsDetails value for tangibleAssetsDetails.
         * @return Builder
         */
        public Builder tangibleAssetsDetails(TangibleAssetsDetails tangibleAssetsDetails) {
            this.tangibleAssetsDetails = tangibleAssetsDetails;
            return this;
        }

        /**
         * Setter for intangibleAssets.
         * @param  intangibleAssets  Double value for intangibleAssets.
         * @return Builder
         */
        public Builder intangibleAssets(Double intangibleAssets) {
            this.intangibleAssets = intangibleAssets;
            return this;
        }

        /**
         * Setter for investmentAssetsDetails.
         * @param  investmentAssetsDetails  InvestmentAssetsDetails value for
         *         investmentAssetsDetails.
         * @return Builder
         */
        public Builder investmentAssetsDetails(InvestmentAssetsDetails investmentAssetsDetails) {
            this.investmentAssetsDetails = investmentAssetsDetails;
            return this;
        }

        /**
         * Setter for financialAssetsNonCurrentDetails.
         * @param  financialAssetsNonCurrentDetails  FinancialAssetsNonCurrentDetails value for
         *         financialAssetsNonCurrentDetails.
         * @return Builder
         */
        public Builder financialAssetsNonCurrentDetails(
                FinancialAssetsNonCurrentDetails financialAssetsNonCurrentDetails) {
            this.financialAssetsNonCurrentDetails = financialAssetsNonCurrentDetails;
            return this;
        }

        /**
         * Setter for otherNonCurrentAssetsDetails.
         * @param  otherNonCurrentAssetsDetails  OtherNonCurrentAssetsDetails value for
         *         otherNonCurrentAssetsDetails.
         * @return Builder
         */
        public Builder otherNonCurrentAssetsDetails(
                OtherNonCurrentAssetsDetails otherNonCurrentAssetsDetails) {
            this.otherNonCurrentAssetsDetails = otherNonCurrentAssetsDetails;
            return this;
        }

        /**
         * Setter for totalFixedNonCurrentAssets.
         * @param  totalFixedNonCurrentAssets  Double value for totalFixedNonCurrentAssets.
         * @return Builder
         */
        public Builder totalFixedNonCurrentAssets(Double totalFixedNonCurrentAssets) {
            this.totalFixedNonCurrentAssets = totalFixedNonCurrentAssets;
            return this;
        }

        /**
         * Setter for inventoriesDetails.
         * @param  inventoriesDetails  InventoriesDetails value for inventoriesDetails.
         * @return Builder
         */
        public Builder inventoriesDetails(InventoriesDetails inventoriesDetails) {
            this.inventoriesDetails = inventoriesDetails;
            return this;
        }

        /**
         * Setter for debtorsDetails.
         * @param  debtorsDetails  DebtorsDetails value for debtorsDetails.
         * @return Builder
         */
        public Builder debtorsDetails(DebtorsDetails debtorsDetails) {
            this.debtorsDetails = debtorsDetails;
            return this;
        }

        /**
         * Setter for totalCashDetails.
         * @param  totalCashDetails  TotalCashDetails value for totalCashDetails.
         * @return Builder
         */
        public Builder totalCashDetails(TotalCashDetails totalCashDetails) {
            this.totalCashDetails = totalCashDetails;
            return this;
        }

        /**
         * Setter for financialAssetsCurrentDetails.
         * @param  financialAssetsCurrentDetails  FinancialAssetsCurrentDetails value for
         *         financialAssetsCurrentDetails.
         * @return Builder
         */
        public Builder financialAssetsCurrentDetails(
                FinancialAssetsCurrentDetails financialAssetsCurrentDetails) {
            this.financialAssetsCurrentDetails = financialAssetsCurrentDetails;
            return this;
        }

        /**
         * Setter for otherCurrentAssetsDetails.
         * @param  otherCurrentAssetsDetails  OtherCurrentAssetsDetails value for
         *         otherCurrentAssetsDetails.
         * @return Builder
         */
        public Builder otherCurrentAssetsDetails(
                OtherCurrentAssetsDetails otherCurrentAssetsDetails) {
            this.otherCurrentAssetsDetails = otherCurrentAssetsDetails;
            return this;
        }

        /**
         * Setter for totalCurrentAssets.
         * @param  totalCurrentAssets  Double value for totalCurrentAssets.
         * @return Builder
         */
        public Builder totalCurrentAssets(Double totalCurrentAssets) {
            this.totalCurrentAssets = totalCurrentAssets;
            return this;
        }

        /**
         * Setter for creditorsDetails.
         * @param  creditorsDetails  CreditorsDetails value for creditorsDetails.
         * @return Builder
         */
        public Builder creditorsDetails(CreditorsDetails creditorsDetails) {
            this.creditorsDetails = creditorsDetails;
            return this;
        }

        /**
         * Setter for financialLiabilitiesDetails.
         * @param  financialLiabilitiesDetails  FinancialLiabilitiesDetails value for
         *         financialLiabilitiesDetails.
         * @return Builder
         */
        public Builder financialLiabilitiesDetails(
                FinancialLiabilitiesDetails financialLiabilitiesDetails) {
            this.financialLiabilitiesDetails = financialLiabilitiesDetails;
            return this;
        }

        /**
         * Setter for otherCurrentLiabilitiesDetails.
         * @param  otherCurrentLiabilitiesDetails  OtherCurrentLiabilitiesDetails value for
         *         otherCurrentLiabilitiesDetails.
         * @return Builder
         */
        public Builder otherCurrentLiabilitiesDetails(
                OtherCurrentLiabilitiesDetails otherCurrentLiabilitiesDetails) {
            this.otherCurrentLiabilitiesDetails = otherCurrentLiabilitiesDetails;
            return this;
        }

        /**
         * Setter for totalCurrentLiabilities.
         * @param  totalCurrentLiabilities  Double value for totalCurrentLiabilities.
         * @return Builder
         */
        public Builder totalCurrentLiabilities(Double totalCurrentLiabilities) {
            this.totalCurrentLiabilities = totalCurrentLiabilities;
            return this;
        }

        /**
         * Setter for workingCapital.
         * @param  workingCapital  Double value for workingCapital.
         * @return Builder
         */
        public Builder workingCapital(Double workingCapital) {
            this.workingCapital = workingCapital;
            return this;
        }

        /**
         * Setter for capitalEmployed.
         * @param  capitalEmployed  Double value for capitalEmployed.
         * @return Builder
         */
        public Builder capitalEmployed(Double capitalEmployed) {
            this.capitalEmployed = capitalEmployed;
            return this;
        }

        /**
         * Setter for longTermFinancialLiabilitiesDetails.
         * @param  longTermFinancialLiabilitiesDetails  LongTermFinancialLiabilitiesDetails value
         *         for longTermFinancialLiabilitiesDetails.
         * @return Builder
         */
        public Builder longTermFinancialLiabilitiesDetails(
                LongTermFinancialLiabilitiesDetails longTermFinancialLiabilitiesDetails) {
            this.longTermFinancialLiabilitiesDetails = longTermFinancialLiabilitiesDetails;
            return this;
        }

        /**
         * Setter for otherNonCurrentLiabilitiesDetails.
         * @param  otherNonCurrentLiabilitiesDetails  OtherNonCurrentLiabilitiesDetails value for
         *         otherNonCurrentLiabilitiesDetails.
         * @return Builder
         */
        public Builder otherNonCurrentLiabilitiesDetails(
                OtherNonCurrentLiabilitiesDetails otherNonCurrentLiabilitiesDetails) {
            this.otherNonCurrentLiabilitiesDetails = otherNonCurrentLiabilitiesDetails;
            return this;
        }

        /**
         * Setter for totalNonCurrentLiabilities.
         * @param  totalNonCurrentLiabilities  Double value for totalNonCurrentLiabilities.
         * @return Builder
         */
        public Builder totalNonCurrentLiabilities(Double totalNonCurrentLiabilities) {
            this.totalNonCurrentLiabilities = totalNonCurrentLiabilities;
            return this;
        }

        /**
         * Setter for provisionsDetails.
         * @param  provisionsDetails  ProvisionsDetails value for provisionsDetails.
         * @return Builder
         */
        public Builder provisionsDetails(ProvisionsDetails provisionsDetails) {
            this.provisionsDetails = provisionsDetails;
            return this;
        }

        /**
         * Setter for minorityInterestsUKGAAP.
         * @param  minorityInterestsUKGAAP  Double value for minorityInterestsUKGAAP.
         * @return Builder
         */
        public Builder minorityInterestsUKGAAP(Double minorityInterestsUKGAAP) {
            this.minorityInterestsUKGAAP = minorityInterestsUKGAAP;
            return this;
        }

        /**
         * Setter for netAssets.
         * @param  netAssets  Double value for netAssets.
         * @return Builder
         */
        public Builder netAssets(Double netAssets) {
            this.netAssets = netAssets;
            return this;
        }

        /**
         * Setter for issuedCapitalDetails.
         * @param  issuedCapitalDetails  IssuedCapitalDetails value for issuedCapitalDetails.
         * @return Builder
         */
        public Builder issuedCapitalDetails(IssuedCapitalDetails issuedCapitalDetails) {
            this.issuedCapitalDetails = issuedCapitalDetails;
            return this;
        }

        /**
         * Setter for sharePremium.
         * @param  sharePremium  Double value for sharePremium.
         * @return Builder
         */
        public Builder sharePremium(Double sharePremium) {
            this.sharePremium = sharePremium;
            return this;
        }

        /**
         * Setter for interestInOwnShares.
         * @param  interestInOwnShares  Double value for interestInOwnShares.
         * @return Builder
         */
        public Builder interestInOwnShares(Double interestInOwnShares) {
            this.interestInOwnShares = interestInOwnShares;
            return this;
        }

        /**
         * Setter for retainedEarnings.
         * @param  retainedEarnings  Double value for retainedEarnings.
         * @return Builder
         */
        public Builder retainedEarnings(Double retainedEarnings) {
            this.retainedEarnings = retainedEarnings;
            return this;
        }

        /**
         * Setter for revaluationReserve.
         * @param  revaluationReserve  Double value for revaluationReserve.
         * @return Builder
         */
        public Builder revaluationReserve(Double revaluationReserve) {
            this.revaluationReserve = revaluationReserve;
            return this;
        }

        /**
         * Setter for currencyTranslationReserve.
         * @param  currencyTranslationReserve  Double value for currencyTranslationReserve.
         * @return Builder
         */
        public Builder currencyTranslationReserve(Double currencyTranslationReserve) {
            this.currencyTranslationReserve = currencyTranslationReserve;
            return this;
        }

        /**
         * Setter for other.
         * @param  other  Double value for other.
         * @return Builder
         */
        public Builder other(Double other) {
            this.other = other;
            return this;
        }

        /**
         * Setter for totalShareholdersFunds.
         * @param  totalShareholdersFunds  Double value for totalShareholdersFunds.
         * @return Builder
         */
        public Builder totalShareholdersFunds(Double totalShareholdersFunds) {
            this.totalShareholdersFunds = totalShareholdersFunds;
            return this;
        }

        /**
         * Setter for minorityInterestsIFRS.
         * @param  minorityInterestsIFRS  Double value for minorityInterestsIFRS.
         * @return Builder
         */
        public Builder minorityInterestsIFRS(Double minorityInterestsIFRS) {
            this.minorityInterestsIFRS = minorityInterestsIFRS;
            return this;
        }

        /**
         * Setter for netWorth.
         * @param  netWorth  Double value for netWorth.
         * @return Builder
         */
        public Builder netWorth(Double netWorth) {
            this.netWorth = netWorth;
            return this;
        }

        /**
         * Builds a new {@link BalanceSheet} object using the set fields.
         * @return {@link BalanceSheet}
         */
        public BalanceSheet build() {
            return new BalanceSheet(tangibleAssetsDetails, intangibleAssets,
                    investmentAssetsDetails, financialAssetsNonCurrentDetails,
                    otherNonCurrentAssetsDetails, totalFixedNonCurrentAssets, inventoriesDetails,
                    debtorsDetails, totalCashDetails, financialAssetsCurrentDetails,
                    otherCurrentAssetsDetails, totalCurrentAssets, creditorsDetails,
                    financialLiabilitiesDetails, otherCurrentLiabilitiesDetails,
                    totalCurrentLiabilities, workingCapital, capitalEmployed,
                    longTermFinancialLiabilitiesDetails, otherNonCurrentLiabilitiesDetails,
                    totalNonCurrentLiabilities, provisionsDetails, minorityInterestsUKGAAP,
                    netAssets, issuedCapitalDetails, sharePremium, interestInOwnShares,
                    retainedEarnings, revaluationReserve, currencyTranslationReserve, other,
                    totalShareholdersFunds, minorityInterestsIFRS, netWorth);
        }
    }
}
