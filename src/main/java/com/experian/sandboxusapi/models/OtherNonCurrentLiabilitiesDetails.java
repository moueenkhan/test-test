/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for OtherNonCurrentLiabilitiesDetails type.
 */
public class OtherNonCurrentLiabilitiesDetails {
    private Double otherNonCurrentLiabilities;
    private Double longTermTrade;
    private Double subsidiaryAssociateJoint;
    private Double groupLoans;
    private Double directorLoans;
    private Double assetsHeldForResale;
    private Double accruals;
    private Double preferenceShares;
    private Double other;

    /**
     * Default constructor.
     */
    public OtherNonCurrentLiabilitiesDetails() {
    }

    /**
     * Initialization constructor.
     * @param  otherNonCurrentLiabilities  Double value for otherNonCurrentLiabilities.
     * @param  longTermTrade  Double value for longTermTrade.
     * @param  subsidiaryAssociateJoint  Double value for subsidiaryAssociateJoint.
     * @param  groupLoans  Double value for groupLoans.
     * @param  directorLoans  Double value for directorLoans.
     * @param  assetsHeldForResale  Double value for assetsHeldForResale.
     * @param  accruals  Double value for accruals.
     * @param  preferenceShares  Double value for preferenceShares.
     * @param  other  Double value for other.
     */
    public OtherNonCurrentLiabilitiesDetails(
            Double otherNonCurrentLiabilities,
            Double longTermTrade,
            Double subsidiaryAssociateJoint,
            Double groupLoans,
            Double directorLoans,
            Double assetsHeldForResale,
            Double accruals,
            Double preferenceShares,
            Double other) {
        this.otherNonCurrentLiabilities = otherNonCurrentLiabilities;
        this.longTermTrade = longTermTrade;
        this.subsidiaryAssociateJoint = subsidiaryAssociateJoint;
        this.groupLoans = groupLoans;
        this.directorLoans = directorLoans;
        this.assetsHeldForResale = assetsHeldForResale;
        this.accruals = accruals;
        this.preferenceShares = preferenceShares;
        this.other = other;
    }

    /**
     * Getter for OtherNonCurrentLiabilities.
     * Value for Balance Sheet - Other Non-current Liabilities - Other Non Current liabilities for
     * these accounts
     * @return Returns the Double
     */
    @JsonGetter("OtherNonCurrentLiabilities")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOtherNonCurrentLiabilities() {
        return otherNonCurrentLiabilities;
    }

    /**
     * Setter for OtherNonCurrentLiabilities.
     * Value for Balance Sheet - Other Non-current Liabilities - Other Non Current liabilities for
     * these accounts
     * @param otherNonCurrentLiabilities Value for Double
     */
    @JsonSetter("OtherNonCurrentLiabilities")
    public void setOtherNonCurrentLiabilities(Double otherNonCurrentLiabilities) {
        this.otherNonCurrentLiabilities = otherNonCurrentLiabilities;
    }

    /**
     * Getter for LongTermTrade.
     * Value for Balance Sheet - Other Non-current Liabilities - Long Term Trade for these accounts
     * @return Returns the Double
     */
    @JsonGetter("LongTermTrade")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getLongTermTrade() {
        return longTermTrade;
    }

    /**
     * Setter for LongTermTrade.
     * Value for Balance Sheet - Other Non-current Liabilities - Long Term Trade for these accounts
     * @param longTermTrade Value for Double
     */
    @JsonSetter("LongTermTrade")
    public void setLongTermTrade(Double longTermTrade) {
        this.longTermTrade = longTermTrade;
    }

    /**
     * Getter for SubsidiaryAssociateJoint.
     * Value for Balance Sheet - Other Non-current Liabilities - Subsidiary / Associate / Joint
     * Creditors for these accounts
     * @return Returns the Double
     */
    @JsonGetter("SubsidiaryAssociateJoint")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getSubsidiaryAssociateJoint() {
        return subsidiaryAssociateJoint;
    }

    /**
     * Setter for SubsidiaryAssociateJoint.
     * Value for Balance Sheet - Other Non-current Liabilities - Subsidiary / Associate / Joint
     * Creditors for these accounts
     * @param subsidiaryAssociateJoint Value for Double
     */
    @JsonSetter("SubsidiaryAssociateJoint")
    public void setSubsidiaryAssociateJoint(Double subsidiaryAssociateJoint) {
        this.subsidiaryAssociateJoint = subsidiaryAssociateJoint;
    }

    /**
     * Getter for GroupLoans.
     * Value for Balance Sheet - Other Non-current Liabilities - Group Loans for these accounts
     * (applicable to UK GAAP only)
     * @return Returns the Double
     */
    @JsonGetter("GroupLoans")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getGroupLoans() {
        return groupLoans;
    }

    /**
     * Setter for GroupLoans.
     * Value for Balance Sheet - Other Non-current Liabilities - Group Loans for these accounts
     * (applicable to UK GAAP only)
     * @param groupLoans Value for Double
     */
    @JsonSetter("GroupLoans")
    public void setGroupLoans(Double groupLoans) {
        this.groupLoans = groupLoans;
    }

    /**
     * Getter for DirectorLoans.
     * Value for Balance Sheet - Other Non-current Liabilities - Director's Loans for these accounts
     * (applicable to UK GAAP only)
     * @return Returns the Double
     */
    @JsonGetter("DirectorLoans")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDirectorLoans() {
        return directorLoans;
    }

    /**
     * Setter for DirectorLoans.
     * Value for Balance Sheet - Other Non-current Liabilities - Director's Loans for these accounts
     * (applicable to UK GAAP only)
     * @param directorLoans Value for Double
     */
    @JsonSetter("DirectorLoans")
    public void setDirectorLoans(Double directorLoans) {
        this.directorLoans = directorLoans;
    }

    /**
     * Getter for AssetsHeldForResale.
     * Value for Balance Sheet - Other Non-current Liabilities - Assets Held for Resale for these
     * accounts
     * @return Returns the Double
     */
    @JsonGetter("AssetsHeldForResale")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAssetsHeldForResale() {
        return assetsHeldForResale;
    }

    /**
     * Setter for AssetsHeldForResale.
     * Value for Balance Sheet - Other Non-current Liabilities - Assets Held for Resale for these
     * accounts
     * @param assetsHeldForResale Value for Double
     */
    @JsonSetter("AssetsHeldForResale")
    public void setAssetsHeldForResale(Double assetsHeldForResale) {
        this.assetsHeldForResale = assetsHeldForResale;
    }

    /**
     * Getter for Accruals.
     * Value for Balance Sheet - Other Non-current Liabilities - Accruals for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Accruals")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAccruals() {
        return accruals;
    }

    /**
     * Setter for Accruals.
     * Value for Balance Sheet - Other Non-current Liabilities - Accruals for these accounts
     * @param accruals Value for Double
     */
    @JsonSetter("Accruals")
    public void setAccruals(Double accruals) {
        this.accruals = accruals;
    }

    /**
     * Getter for PreferenceShares.
     * Value for Balance Sheet - Other Non-current Liabilities - Preference Shares for these
     * accounts (applicable to IFRS only)
     * @return Returns the Double
     */
    @JsonGetter("PreferenceShares")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getPreferenceShares() {
        return preferenceShares;
    }

    /**
     * Setter for PreferenceShares.
     * Value for Balance Sheet - Other Non-current Liabilities - Preference Shares for these
     * accounts (applicable to IFRS only)
     * @param preferenceShares Value for Double
     */
    @JsonSetter("PreferenceShares")
    public void setPreferenceShares(Double preferenceShares) {
        this.preferenceShares = preferenceShares;
    }

    /**
     * Getter for Other.
     * Value for Balance Sheet - Other Non-current Liabilities - Other for these accounts
     * @return Returns the Double
     */
    @JsonGetter("Other")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getOther() {
        return other;
    }

    /**
     * Setter for Other.
     * Value for Balance Sheet - Other Non-current Liabilities - Other for these accounts
     * @param other Value for Double
     */
    @JsonSetter("Other")
    public void setOther(Double other) {
        this.other = other;
    }

    /**
     * Converts this OtherNonCurrentLiabilitiesDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OtherNonCurrentLiabilitiesDetails [" + "otherNonCurrentLiabilities="
                + otherNonCurrentLiabilities + ", longTermTrade=" + longTermTrade
                + ", subsidiaryAssociateJoint=" + subsidiaryAssociateJoint + ", groupLoans="
                + groupLoans + ", directorLoans=" + directorLoans + ", assetsHeldForResale="
                + assetsHeldForResale + ", accruals=" + accruals + ", preferenceShares="
                + preferenceShares + ", other=" + other + "]";
    }

    /**
     * Builds a new {@link OtherNonCurrentLiabilitiesDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OtherNonCurrentLiabilitiesDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .otherNonCurrentLiabilities(getOtherNonCurrentLiabilities())
                .longTermTrade(getLongTermTrade())
                .subsidiaryAssociateJoint(getSubsidiaryAssociateJoint())
                .groupLoans(getGroupLoans())
                .directorLoans(getDirectorLoans())
                .assetsHeldForResale(getAssetsHeldForResale())
                .accruals(getAccruals())
                .preferenceShares(getPreferenceShares())
                .other(getOther());
        return builder;
    }

    /**
     * Class to build instances of {@link OtherNonCurrentLiabilitiesDetails}.
     */
    public static class Builder {
        private Double otherNonCurrentLiabilities;
        private Double longTermTrade;
        private Double subsidiaryAssociateJoint;
        private Double groupLoans;
        private Double directorLoans;
        private Double assetsHeldForResale;
        private Double accruals;
        private Double preferenceShares;
        private Double other;



        /**
         * Setter for otherNonCurrentLiabilities.
         * @param  otherNonCurrentLiabilities  Double value for otherNonCurrentLiabilities.
         * @return Builder
         */
        public Builder otherNonCurrentLiabilities(Double otherNonCurrentLiabilities) {
            this.otherNonCurrentLiabilities = otherNonCurrentLiabilities;
            return this;
        }

        /**
         * Setter for longTermTrade.
         * @param  longTermTrade  Double value for longTermTrade.
         * @return Builder
         */
        public Builder longTermTrade(Double longTermTrade) {
            this.longTermTrade = longTermTrade;
            return this;
        }

        /**
         * Setter for subsidiaryAssociateJoint.
         * @param  subsidiaryAssociateJoint  Double value for subsidiaryAssociateJoint.
         * @return Builder
         */
        public Builder subsidiaryAssociateJoint(Double subsidiaryAssociateJoint) {
            this.subsidiaryAssociateJoint = subsidiaryAssociateJoint;
            return this;
        }

        /**
         * Setter for groupLoans.
         * @param  groupLoans  Double value for groupLoans.
         * @return Builder
         */
        public Builder groupLoans(Double groupLoans) {
            this.groupLoans = groupLoans;
            return this;
        }

        /**
         * Setter for directorLoans.
         * @param  directorLoans  Double value for directorLoans.
         * @return Builder
         */
        public Builder directorLoans(Double directorLoans) {
            this.directorLoans = directorLoans;
            return this;
        }

        /**
         * Setter for assetsHeldForResale.
         * @param  assetsHeldForResale  Double value for assetsHeldForResale.
         * @return Builder
         */
        public Builder assetsHeldForResale(Double assetsHeldForResale) {
            this.assetsHeldForResale = assetsHeldForResale;
            return this;
        }

        /**
         * Setter for accruals.
         * @param  accruals  Double value for accruals.
         * @return Builder
         */
        public Builder accruals(Double accruals) {
            this.accruals = accruals;
            return this;
        }

        /**
         * Setter for preferenceShares.
         * @param  preferenceShares  Double value for preferenceShares.
         * @return Builder
         */
        public Builder preferenceShares(Double preferenceShares) {
            this.preferenceShares = preferenceShares;
            return this;
        }

        /**
         * Setter for other.
         * @param  other  Double value for other.
         * @return Builder
         */
        public Builder other(Double other) {
            this.other = other;
            return this;
        }

        /**
         * Builds a new {@link OtherNonCurrentLiabilitiesDetails} object using the set fields.
         * @return {@link OtherNonCurrentLiabilitiesDetails}
         */
        public OtherNonCurrentLiabilitiesDetails build() {
            return new OtherNonCurrentLiabilitiesDetails(otherNonCurrentLiabilities, longTermTrade,
                    subsidiaryAssociateJoint, groupLoans, directorLoans, assetsHeldForResale,
                    accruals, preferenceShares, other);
        }
    }
}
