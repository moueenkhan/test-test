/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;

/**
 * This is a model class for DisclosureItems type.
 */
public class DisclosureItems {
    private Double dividendsPayable;
    private EmployeeRemunerationDetails employeeRemunerationDetails;
    private DirectorRemunerationDetails directorRemunerationDetails;
    private Double highestPaidDirector;
    private Double numberEmployees;
    private Double auditorRemuneration;
    private Double nonAuditFees;
    private Double accountancyFees;
    private Double depreciationCharges;
    private Double amortisationCharges;
    private Double impairmentCharges;

    /**
     * Default constructor.
     */
    public DisclosureItems() {
    }

    /**
     * Initialization constructor.
     * @param  dividendsPayable  Double value for dividendsPayable.
     * @param  employeeRemunerationDetails  EmployeeRemunerationDetails value for
     *         employeeRemunerationDetails.
     * @param  directorRemunerationDetails  DirectorRemunerationDetails value for
     *         directorRemunerationDetails.
     * @param  highestPaidDirector  Double value for highestPaidDirector.
     * @param  numberEmployees  Double value for numberEmployees.
     * @param  auditorRemuneration  Double value for auditorRemuneration.
     * @param  nonAuditFees  Double value for nonAuditFees.
     * @param  accountancyFees  Double value for accountancyFees.
     * @param  depreciationCharges  Double value for depreciationCharges.
     * @param  amortisationCharges  Double value for amortisationCharges.
     * @param  impairmentCharges  Double value for impairmentCharges.
     */
    public DisclosureItems(
            Double dividendsPayable,
            EmployeeRemunerationDetails employeeRemunerationDetails,
            DirectorRemunerationDetails directorRemunerationDetails,
            Double highestPaidDirector,
            Double numberEmployees,
            Double auditorRemuneration,
            Double nonAuditFees,
            Double accountancyFees,
            Double depreciationCharges,
            Double amortisationCharges,
            Double impairmentCharges) {
        this.dividendsPayable = dividendsPayable;
        this.employeeRemunerationDetails = employeeRemunerationDetails;
        this.directorRemunerationDetails = directorRemunerationDetails;
        this.highestPaidDirector = highestPaidDirector;
        this.numberEmployees = numberEmployees;
        this.auditorRemuneration = auditorRemuneration;
        this.nonAuditFees = nonAuditFees;
        this.accountancyFees = accountancyFees;
        this.depreciationCharges = depreciationCharges;
        this.amortisationCharges = amortisationCharges;
        this.impairmentCharges = impairmentCharges;
    }

    /**
     * Getter for DividendsPayable.
     * Value for Disclosure Items - Dividends Payable for these accounts
     * @return Returns the Double
     */
    @JsonGetter("DividendsPayable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDividendsPayable() {
        return dividendsPayable;
    }

    /**
     * Setter for DividendsPayable.
     * Value for Disclosure Items - Dividends Payable for these accounts
     * @param dividendsPayable Value for Double
     */
    @JsonSetter("DividendsPayable")
    public void setDividendsPayable(Double dividendsPayable) {
        this.dividendsPayable = dividendsPayable;
    }

    /**
     * Getter for EmployeeRemunerationDetails.
     * @return Returns the EmployeeRemunerationDetails
     */
    @JsonGetter("EmployeeRemunerationDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public EmployeeRemunerationDetails getEmployeeRemunerationDetails() {
        return employeeRemunerationDetails;
    }

    /**
     * Setter for EmployeeRemunerationDetails.
     * @param employeeRemunerationDetails Value for EmployeeRemunerationDetails
     */
    @JsonSetter("EmployeeRemunerationDetails")
    public void setEmployeeRemunerationDetails(EmployeeRemunerationDetails employeeRemunerationDetails) {
        this.employeeRemunerationDetails = employeeRemunerationDetails;
    }

    /**
     * Getter for DirectorRemunerationDetails.
     * @return Returns the DirectorRemunerationDetails
     */
    @JsonGetter("DirectorRemunerationDetails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DirectorRemunerationDetails getDirectorRemunerationDetails() {
        return directorRemunerationDetails;
    }

    /**
     * Setter for DirectorRemunerationDetails.
     * @param directorRemunerationDetails Value for DirectorRemunerationDetails
     */
    @JsonSetter("DirectorRemunerationDetails")
    public void setDirectorRemunerationDetails(DirectorRemunerationDetails directorRemunerationDetails) {
        this.directorRemunerationDetails = directorRemunerationDetails;
    }

    /**
     * Getter for HighestPaidDirector.
     * Value for Disclosure Items - Highest Paid Director for these accounts
     * @return Returns the Double
     */
    @JsonGetter("HighestPaidDirector")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getHighestPaidDirector() {
        return highestPaidDirector;
    }

    /**
     * Setter for HighestPaidDirector.
     * Value for Disclosure Items - Highest Paid Director for these accounts
     * @param highestPaidDirector Value for Double
     */
    @JsonSetter("HighestPaidDirector")
    public void setHighestPaidDirector(Double highestPaidDirector) {
        this.highestPaidDirector = highestPaidDirector;
    }

    /**
     * Getter for NumberEmployees.
     * Value for Disclosure Items - Number of Employees for these accounts
     * @return Returns the Double
     */
    @JsonGetter("NumberEmployees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getNumberEmployees() {
        return numberEmployees;
    }

    /**
     * Setter for NumberEmployees.
     * Value for Disclosure Items - Number of Employees for these accounts
     * @param numberEmployees Value for Double
     */
    @JsonSetter("NumberEmployees")
    public void setNumberEmployees(Double numberEmployees) {
        this.numberEmployees = numberEmployees;
    }

    /**
     * Getter for AuditorRemuneration.
     * Value for Disclosure Items - Auditor Remuneration for these accounts
     * @return Returns the Double
     */
    @JsonGetter("AuditorRemuneration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAuditorRemuneration() {
        return auditorRemuneration;
    }

    /**
     * Setter for AuditorRemuneration.
     * Value for Disclosure Items - Auditor Remuneration for these accounts
     * @param auditorRemuneration Value for Double
     */
    @JsonSetter("AuditorRemuneration")
    public void setAuditorRemuneration(Double auditorRemuneration) {
        this.auditorRemuneration = auditorRemuneration;
    }

    /**
     * Getter for NonAuditFees.
     * Value for Disclosure Items - Non-Audit Fees for these accounts
     * @return Returns the Double
     */
    @JsonGetter("NonAuditFees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getNonAuditFees() {
        return nonAuditFees;
    }

    /**
     * Setter for NonAuditFees.
     * Value for Disclosure Items - Non-Audit Fees for these accounts
     * @param nonAuditFees Value for Double
     */
    @JsonSetter("NonAuditFees")
    public void setNonAuditFees(Double nonAuditFees) {
        this.nonAuditFees = nonAuditFees;
    }

    /**
     * Getter for AccountancyFees.
     * Value for Disclosure Items - Accountancy Fees for these accounts
     * @return Returns the Double
     */
    @JsonGetter("AccountancyFees")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAccountancyFees() {
        return accountancyFees;
    }

    /**
     * Setter for AccountancyFees.
     * Value for Disclosure Items - Accountancy Fees for these accounts
     * @param accountancyFees Value for Double
     */
    @JsonSetter("AccountancyFees")
    public void setAccountancyFees(Double accountancyFees) {
        this.accountancyFees = accountancyFees;
    }

    /**
     * Getter for DepreciationCharges.
     * Value for Disclosure Items - Depreciation Charges for these accounts
     * @return Returns the Double
     */
    @JsonGetter("DepreciationCharges")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getDepreciationCharges() {
        return depreciationCharges;
    }

    /**
     * Setter for DepreciationCharges.
     * Value for Disclosure Items - Depreciation Charges for these accounts
     * @param depreciationCharges Value for Double
     */
    @JsonSetter("DepreciationCharges")
    public void setDepreciationCharges(Double depreciationCharges) {
        this.depreciationCharges = depreciationCharges;
    }

    /**
     * Getter for AmortisationCharges.
     * Value for Disclosure Items - Amortisation Charges for these accounts
     * @return Returns the Double
     */
    @JsonGetter("AmortisationCharges")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getAmortisationCharges() {
        return amortisationCharges;
    }

    /**
     * Setter for AmortisationCharges.
     * Value for Disclosure Items - Amortisation Charges for these accounts
     * @param amortisationCharges Value for Double
     */
    @JsonSetter("AmortisationCharges")
    public void setAmortisationCharges(Double amortisationCharges) {
        this.amortisationCharges = amortisationCharges;
    }

    /**
     * Getter for ImpairmentCharges.
     * Value for Disclosure Items - Impairment Charges for these accounts
     * @return Returns the Double
     */
    @JsonGetter("ImpairmentCharges")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getImpairmentCharges() {
        return impairmentCharges;
    }

    /**
     * Setter for ImpairmentCharges.
     * Value for Disclosure Items - Impairment Charges for these accounts
     * @param impairmentCharges Value for Double
     */
    @JsonSetter("ImpairmentCharges")
    public void setImpairmentCharges(Double impairmentCharges) {
        this.impairmentCharges = impairmentCharges;
    }

    /**
     * Converts this DisclosureItems into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DisclosureItems [" + "dividendsPayable=" + dividendsPayable
                + ", employeeRemunerationDetails=" + employeeRemunerationDetails
                + ", directorRemunerationDetails=" + directorRemunerationDetails
                + ", highestPaidDirector=" + highestPaidDirector + ", numberEmployees="
                + numberEmployees + ", auditorRemuneration=" + auditorRemuneration
                + ", nonAuditFees=" + nonAuditFees + ", accountancyFees=" + accountancyFees
                + ", depreciationCharges=" + depreciationCharges + ", amortisationCharges="
                + amortisationCharges + ", impairmentCharges=" + impairmentCharges + "]";
    }

    /**
     * Builds a new {@link DisclosureItems.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link DisclosureItems.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .dividendsPayable(getDividendsPayable())
                .employeeRemunerationDetails(getEmployeeRemunerationDetails())
                .directorRemunerationDetails(getDirectorRemunerationDetails())
                .highestPaidDirector(getHighestPaidDirector())
                .numberEmployees(getNumberEmployees())
                .auditorRemuneration(getAuditorRemuneration())
                .nonAuditFees(getNonAuditFees())
                .accountancyFees(getAccountancyFees())
                .depreciationCharges(getDepreciationCharges())
                .amortisationCharges(getAmortisationCharges())
                .impairmentCharges(getImpairmentCharges());
        return builder;
    }

    /**
     * Class to build instances of {@link DisclosureItems}.
     */
    public static class Builder {
        private Double dividendsPayable;
        private EmployeeRemunerationDetails employeeRemunerationDetails;
        private DirectorRemunerationDetails directorRemunerationDetails;
        private Double highestPaidDirector;
        private Double numberEmployees;
        private Double auditorRemuneration;
        private Double nonAuditFees;
        private Double accountancyFees;
        private Double depreciationCharges;
        private Double amortisationCharges;
        private Double impairmentCharges;



        /**
         * Setter for dividendsPayable.
         * @param  dividendsPayable  Double value for dividendsPayable.
         * @return Builder
         */
        public Builder dividendsPayable(Double dividendsPayable) {
            this.dividendsPayable = dividendsPayable;
            return this;
        }

        /**
         * Setter for employeeRemunerationDetails.
         * @param  employeeRemunerationDetails  EmployeeRemunerationDetails value for
         *         employeeRemunerationDetails.
         * @return Builder
         */
        public Builder employeeRemunerationDetails(
                EmployeeRemunerationDetails employeeRemunerationDetails) {
            this.employeeRemunerationDetails = employeeRemunerationDetails;
            return this;
        }

        /**
         * Setter for directorRemunerationDetails.
         * @param  directorRemunerationDetails  DirectorRemunerationDetails value for
         *         directorRemunerationDetails.
         * @return Builder
         */
        public Builder directorRemunerationDetails(
                DirectorRemunerationDetails directorRemunerationDetails) {
            this.directorRemunerationDetails = directorRemunerationDetails;
            return this;
        }

        /**
         * Setter for highestPaidDirector.
         * @param  highestPaidDirector  Double value for highestPaidDirector.
         * @return Builder
         */
        public Builder highestPaidDirector(Double highestPaidDirector) {
            this.highestPaidDirector = highestPaidDirector;
            return this;
        }

        /**
         * Setter for numberEmployees.
         * @param  numberEmployees  Double value for numberEmployees.
         * @return Builder
         */
        public Builder numberEmployees(Double numberEmployees) {
            this.numberEmployees = numberEmployees;
            return this;
        }

        /**
         * Setter for auditorRemuneration.
         * @param  auditorRemuneration  Double value for auditorRemuneration.
         * @return Builder
         */
        public Builder auditorRemuneration(Double auditorRemuneration) {
            this.auditorRemuneration = auditorRemuneration;
            return this;
        }

        /**
         * Setter for nonAuditFees.
         * @param  nonAuditFees  Double value for nonAuditFees.
         * @return Builder
         */
        public Builder nonAuditFees(Double nonAuditFees) {
            this.nonAuditFees = nonAuditFees;
            return this;
        }

        /**
         * Setter for accountancyFees.
         * @param  accountancyFees  Double value for accountancyFees.
         * @return Builder
         */
        public Builder accountancyFees(Double accountancyFees) {
            this.accountancyFees = accountancyFees;
            return this;
        }

        /**
         * Setter for depreciationCharges.
         * @param  depreciationCharges  Double value for depreciationCharges.
         * @return Builder
         */
        public Builder depreciationCharges(Double depreciationCharges) {
            this.depreciationCharges = depreciationCharges;
            return this;
        }

        /**
         * Setter for amortisationCharges.
         * @param  amortisationCharges  Double value for amortisationCharges.
         * @return Builder
         */
        public Builder amortisationCharges(Double amortisationCharges) {
            this.amortisationCharges = amortisationCharges;
            return this;
        }

        /**
         * Setter for impairmentCharges.
         * @param  impairmentCharges  Double value for impairmentCharges.
         * @return Builder
         */
        public Builder impairmentCharges(Double impairmentCharges) {
            this.impairmentCharges = impairmentCharges;
            return this;
        }

        /**
         * Builds a new {@link DisclosureItems} object using the set fields.
         * @return {@link DisclosureItems}
         */
        public DisclosureItems build() {
            return new DisclosureItems(dividendsPayable, employeeRemunerationDetails,
                    directorRemunerationDetails, highestPaidDirector, numberEmployees,
                    auditorRemuneration, nonAuditFees, accountancyFees, depreciationCharges,
                    amortisationCharges, impairmentCharges);
        }
    }
}
