/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi;

import com.experian.sandboxusapi.controllers.OAuthAuthorizationController;
import com.experian.sandboxusapi.exceptions.ApiException;
import com.experian.sandboxusapi.models.OAuthToken;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.core.authentication.HeaderAuth;
import java.io.IOException;
import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Utility class for OAuth 2 authorization and token management.
 */
public class ResourceOwnerAuthManager extends HeaderAuth implements ResourceOwnerAuth {

    /**
     * Private instance of OAuth 2 API controller.
     */
    private OAuthAuthorizationController oAuthApi;

    private String oAuthClientId;

    private String oAuthClientSecret;

    private String oAuthUsername;

    private String oAuthPassword;

    private OAuthToken oAuthToken;

    /**
     * Constructor.
     */
    public ResourceOwnerAuthManager(String oAuthClientId, String oAuthClientSecret,
            String oAuthUsername, String oAuthPassword, OAuthToken oAuthToken) {
        super(Collections.singletonMap("Authorization",
                getAuthorizationHeader(oAuthToken)));
        this.oAuthClientId = oAuthClientId;
        this.oAuthClientSecret = oAuthClientSecret;
        this.oAuthUsername = oAuthUsername;
        this.oAuthPassword = oAuthPassword;
        this.oAuthToken = oAuthToken;
    }

    /**
    * Apply GlobalConfiguration for token management.
    * @param config GlobalConfiguration instance
    */
    protected void applyGlobalConfiguration(GlobalConfiguration config) {
        this.oAuthApi = new OAuthAuthorizationController(config);
    }


    /**
     * String value for oAuthClientId.
     * @return oAuthClientId
     */
    public String getOAuthClientId() {
        return oAuthClientId;
    }

    /**
     * String value for oAuthClientSecret.
     * @return oAuthClientSecret
     */
    public String getOAuthClientSecret() {
        return oAuthClientSecret;
    }

    /**
     * String value for oAuthUsername.
     * @return oAuthUsername
     */
    public String getOAuthUsername() {
        return oAuthUsername;
    }

    /**
     * String value for oAuthPassword.
     * @return oAuthPassword
     */
    public String getOAuthPassword() {
        return oAuthPassword;
    }

    /**
     * OAuthToken value for oAuthToken.
     * @return oAuthToken
     */
    public OAuthToken getOAuthToken() {
        return oAuthToken;
    }

    /**
     * Checks if provided credentials matched with existing ones.
     * @param oAuthClientId String value for credentials.
     * @param oAuthClientSecret String value for credentials.
     * @param oAuthUsername String value for credentials.
     * @param oAuthPassword String value for credentials.
     * @param oAuthToken OAuthToken value for credentials.
     * @return true if credentials matched.
     */
    public boolean equals(String oAuthClientId, String oAuthClientSecret, String oAuthUsername,
            String oAuthPassword, OAuthToken oAuthToken) {
        return oAuthClientId.equals(getOAuthClientId())
                && oAuthClientSecret.equals(getOAuthClientSecret())
                && oAuthUsername.equals(getOAuthUsername())
                && oAuthPassword.equals(getOAuthPassword())
                && ((getOAuthToken() == null && oAuthToken == null)
                        || (getOAuthToken() != null && oAuthToken != null
                                && oAuthToken.toString().equals(getOAuthToken().toString())));
    }

    /**
     * Converts this ResourceOwnerAuthManager into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ResourceOwnerAuthManager [" + "oAuthClientId=" + oAuthClientId
                + ", oAuthClientSecret=" + oAuthClientSecret + ", oAuthUsername=" + oAuthUsername
                + ", oAuthPassword=" + oAuthPassword + ", oAuthToken=" + oAuthToken + "]";
    }

    /**
     * Fetch the OAuth token asynchronously.
     * @param additionalParameters Additional parameters to send during authorization
     */
    public CompletableFuture<OAuthToken> fetchTokenAsync(
            final Map<String, Object> additionalParameters) {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        return oAuthApi.requestTokenAsync(
            getBasicAuthForClient(),
            oAuthUsername,
            oAuthPassword,
            null,
            aparams).thenApply(token -> {
                return token;
            });
    }

    /**
     * Fetch the OAuth token asynchronously.
     */
    public CompletableFuture<OAuthToken> fetchTokenAsync() {
        return fetchTokenAsync(null);
    }

    /**
     * Fetch the OAuth token.
     * @param additionalParameters Additional parameters to send during authorization
     */
    public OAuthToken fetchToken(Map<String, Object> additionalParameters)
            throws ApiException, IOException {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        OAuthToken token = oAuthApi.requestToken(
            getBasicAuthForClient(),
            oAuthUsername,
            oAuthPassword,
            null,
            aparams);

        if (token.getExpiresIn() != null && token.getExpiresIn() != 0) {
            token.setExpiry((System.currentTimeMillis() / 1000L) + token.getExpiresIn());
        }

        return token;
    }

    /**
     * Fetch the OAuth token.
     */
    public OAuthToken fetchToken() throws ApiException, IOException {
        return fetchToken(null);
    }

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh
     */
    public CompletableFuture<OAuthToken> refreshTokenAsync(
            final Map<String, Object> additionalParameters) {

        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        return oAuthApi.refreshTokenAsync(
            getBasicAuthForClient(),
            getOAuthToken().getRefreshToken(),
            null,
            aparams).thenApply(token -> {
                return token;
            });
    }

    /**
     * Refresh the OAuth token.
     */
    public CompletableFuture<OAuthToken> refreshTokenAsync() {
        return refreshTokenAsync(null);
    }

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh
     */
    public OAuthToken refreshToken(final Map<String, Object> additionalParameters)
            throws ApiException, IOException {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        OAuthToken token = oAuthApi.refreshToken(
            getBasicAuthForClient(),
            getOAuthToken().getRefreshToken(),
            null,
            aparams);

        return token;
    }

    /**
     * Refresh the OAuth token.
     */
    public OAuthToken refreshToken() throws ApiException, IOException {
        return refreshToken(null);
    }

    /**
     * Build authorization header value for basic auth.
     * @return Authorization header value for this client
     */
    private String getBasicAuthForClient() {
        String val = oAuthClientId + ":" + oAuthClientSecret;
        return "Basic " + new String(Base64.getEncoder().encodeToString(val.getBytes()));
    }


    /**
     * Has the OAuth token expired?.
     * @return True if expired
     */
    public boolean isTokenExpired() {
        if (getOAuthToken() == null) { 
            throw new IllegalStateException("OAuth token is missing.");
        }

        return getOAuthToken().getExpiry() != null 
            && getOAuthToken().getExpiry() < (System.currentTimeMillis() / 1000L); 
    }

    /**
    * Create authorization header for API calls.
    * @param token OAuth token
    * @return Authorization header
    */
    private static String getAuthorizationHeader(OAuthToken token) {
        if (token == null) {
            return null;
        }
        return "Bearer " + token.getAccessToken();
    }

    /**
    * Validate the authentication on the httpRequest
    */
    @Override
    public void validate() {
        if (getOAuthToken() == null) {
            throw new IllegalStateException(
                "Client is not authorized.An OAuth token is needed to make API calls.");
        }

        if (isTokenExpired()) {
            throw new IllegalStateException(
                "OAuth token is expired. A valid token is needed to make API calls.");
        }
     }

}
