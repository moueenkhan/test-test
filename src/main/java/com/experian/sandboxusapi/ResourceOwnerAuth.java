/*
 * CommercialCreditAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.experian.sandboxusapi;

import com.experian.sandboxusapi.exceptions.ApiException;
import com.experian.sandboxusapi.models.OAuthToken;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Interface for  Resouce Owner Password Credentials OAuth 2.
 */
public interface ResourceOwnerAuth {

    /**
     * String value for oAuthClientId.
     * @return oAuthClientId
     */
    String getOAuthClientId();

    /**
     * String value for oAuthClientSecret.
     * @return oAuthClientSecret
     */
    String getOAuthClientSecret();

    /**
     * String value for oAuthUsername.
     * @return oAuthUsername
     */
    String getOAuthUsername();

    /**
     * String value for oAuthPassword.
     * @return oAuthPassword
     */
    String getOAuthPassword();

    /**
     * OAuthToken value for oAuthToken.
     * @return oAuthToken
     */
    OAuthToken getOAuthToken();

    /**
     * Checks if provided credentials matched with existing ones.
     * @param oAuthClientId String value for credentials.
     * @param oAuthClientSecret String value for credentials.
     * @param oAuthUsername String value for credentials.
     * @param oAuthPassword String value for credentials.
     * @param oAuthToken OAuthToken value for credentials.
     * @return true if credentials matched.
     */
    boolean equals(String oAuthClientId, String oAuthClientSecret, String oAuthUsername,
            String oAuthPassword, OAuthToken oAuthToken);

    /**
     * Fetch the OAuth token asynchronously.
     * @param additionalParameters Additional parameters to send during authorization
     */
    CompletableFuture<OAuthToken> fetchTokenAsync(final Map<String, Object> additionalParameters);

    /**
     * Fetch the OAuth token asynchronously.
     */
    CompletableFuture<OAuthToken> fetchTokenAsync();

    /**
     * Fetch the OAuth token.
     * @param additionalParameters Additional parameters to send during authorization
     */
    OAuthToken fetchToken(Map<String, Object> additionalParameters)
            throws ApiException, IOException;

    /**
     * Fetch the OAuth token.
     */
    OAuthToken fetchToken() throws ApiException, IOException;

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh
     */
    CompletableFuture<OAuthToken> refreshTokenAsync(final Map<String, Object> additionalParameters);

    /**
     * Refresh the OAuth token.
     */
    CompletableFuture<OAuthToken> refreshTokenAsync();

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh
     */
    OAuthToken refreshToken(final Map<String, Object> additionalParameters)
            throws ApiException, IOException;

    /**
     * Refresh the OAuth token.
     */
    OAuthToken refreshToken() throws ApiException, IOException;
    
    /**
     * Has the OAuth token expired?.
     * @return True if expired
     */
    boolean isTokenExpired();
}
